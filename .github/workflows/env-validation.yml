name: Environment Configuration Validation

on:
  push:
    branches: [ main, develop, feature/** ]
    paths:
      - '.env'
      - '.env.example'
      - 'config/.env.defaults'
      - 'backend/api/**/config.js'
      - 'backend/services/**/config.js'
      - 'frontend/apps/**/config.js'
      - 'backend/api/**/.env*'
      - 'backend/services/**/.env*'
      - 'frontend/apps/**/.env*'
      - 'scripts/env/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '.env'
      - '.env.example'
      - 'config/.env.defaults'
      - 'backend/**/.env*'
      - 'frontend/**/.env*'
      - 'scripts/env/**'
  workflow_dispatch:

jobs:
  validate-env-structure:
    name: Validate .env Structure
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Make validation script executable
        run: chmod +x scripts/env/validate-env-structure.sh

      - name: Run .env structure validation
        id: validate
        run: |
          echo "🔍 Running .env structure validation..."
          if bash scripts/env/validate-env-structure.sh; then
            echo "✅ Validation passed"
            echo "result=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Validation failed"
            echo "result=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Comment on PR (if validation failed)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ❌ Environment Configuration Validation Failed

            The \`.env\` structure validation has failed. This usually means:

            - There are local \`.env\` files in service directories where they shouldn't be
            - Required configuration files are missing from the root

            ### How to Fix

            1. **Remove local .env files** from service directories:
               \`\`\`bash
               # These should NOT exist:
               backend/api/**/.env
               backend/services/**/.env
               frontend/apps/**/.env
               \`\`\`

            2. **Add variables to centralized config:**
               - Add to \`config/.env.defaults\` for default values
               - Add to root \`.env\` for environment-specific values
               - Update \`.env.example\` with placeholders

            3. **Run validation locally:**
               \`\`\`bash
               bash scripts/env/validate-env-structure.sh
               \`\`\`

            ### Documentation
            - 📖 [Environment Configuration Rules](config/ENV-CONFIGURATION-RULES.md)
            - 📖 [Config Directory README](config/README.md)
            - 📖 [Consolidation Guide](CONSOLIDACAO-ENV-COMPLETA.md)
            `
            })

  check-env-examples:
    name: Check .env.example Files
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify .env.example exists in root
        run: |
          if [ ! -f .env.example ]; then
            echo "❌ Missing .env.example in project root"
            exit 1
          fi
          echo "✅ Root .env.example exists"

      - name: Verify config/.env.defaults exists
        run: |
          if [ ! -f config/.env.defaults ]; then
            echo "❌ Missing config/.env.defaults"
            exit 1
          fi
          echo "✅ config/.env.defaults exists"

      - name: Check for uncommitted .env files
        run: |
          # Check if .env is tracked (it should be in this project)
          if ! git ls-files --error-unmatch .env > /dev/null 2>&1; then
            echo "⚠️  Warning: Root .env is not tracked in git"
            echo "This is expected if you're using .env.local for secrets"
          fi

      - name: Verify no service-level .env files are tracked
        run: |
          TRACKED_ENV=$(git ls-files | grep -E '^(backend|frontend)/.*/\.env$' | grep -v '\.env\.example$' || true)
          
          if [ -n "$TRACKED_ENV" ]; then
            echo "❌ Found tracked .env files in service directories:"
            echo "$TRACKED_ENV"
            echo ""
            echo "These files should NOT be tracked in git!"
            echo "Please remove them and add to .gitignore"
            exit 1
          fi
          
          echo "✅ No service-level .env files are tracked"

  validate-env-consistency:
    name: Validate Environment Consistency
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for duplicate variable definitions
        run: |
          echo "🔍 Checking for duplicate variables between .env.example and .env.defaults..."
          
          # Extract variable names (lines starting with A-Z, ignoring comments)
          EXAMPLE_VARS=$(grep -E '^[A-Z]' .env.example 2>/dev/null | cut -d= -f1 | sort || true)
          DEFAULT_VARS=$(grep -E '^[A-Z]' config/.env.defaults 2>/dev/null | cut -d= -f1 | sort || true)
          
          # Find duplicates
          DUPLICATES=$(comm -12 <(echo "$EXAMPLE_VARS") <(echo "$DEFAULT_VARS") || true)
          
          if [ -n "$DUPLICATES" ]; then
            echo "⚠️  Found variables defined in both .env.example and .env.defaults:"
            echo "$DUPLICATES"
            echo ""
            echo "This may indicate redundancy. Consider:"
            echo "- .env.example: For sensitive/user-specific values"
            echo "- .env.defaults: For safe default values"
          else
            echo "✅ No problematic duplicates found"
          fi

      - name: Validate service prefixes
        run: |
          echo "🔍 Checking for variables without service prefixes..."
          
          # Check .env.defaults for common unprefixed variables
          UNPREFIXED=$(grep -E '^(PORT|HOST|TIMEOUT|LOG_LEVEL|CORS_ORIGIN)=' config/.env.defaults 2>/dev/null || true)
          
          if [ -n "$UNPREFIXED" ]; then
            echo "⚠️  Found variables without service prefixes in .env.defaults:"
            echo "$UNPREFIXED"
            echo ""
            echo "Consider using service-prefixed variables like:"
            echo "  SERVICE_NAME_PORT instead of PORT"
            echo "  SERVICE_NAME_LOG_LEVEL instead of LOG_LEVEL"
          else
            echo "✅ All variables appear to use service prefixes"
          fi

  summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [validate-env-structure, check-env-examples, validate-env-consistency]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## 📊 Environment Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.validate-env-structure.result }}" == "success" ]; then
            echo "✅ **Structure Validation:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Structure Validation:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.check-env-examples.result }}" == "success" ]; then
            echo "✅ **Template Files:** Valid" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Template Files:** Issues found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.validate-env-consistency.result }}" == "success" ]; then
            echo "✅ **Consistency Check:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️  **Consistency Check:** Warnings found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📖 [Configuration Rules](config/ENV-CONFIGURATION-RULES.md)" >> $GITHUB_STEP_SUMMARY

