name: Documentation Link Validation

on:
  pull_request:
    branches: [main, develop]
    paths:
      - "docs/**"
      - "**/*.md"
      - "scripts/docs/check-links.py"
  push:
    branches: [main, develop]
    paths:
      - "docs/**"
      - "**/*.md"
      - "scripts/docs/check-links.py"
  schedule:
    # Run daily at 3 AM UTC (midnight BRT)
    - cron: "0 3 * * *"
  workflow_dispatch:
    inputs:
      skip_external:
        description: "Skip external URL validation"
        required: false
        default: "false"

jobs:
  freeze_guard:
    name: Freeze Guard
    runs-on: ubuntu-latest
    outputs:
      active: ${{ steps.detect.outputs.active }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - id: detect
        name: Detect freeze status
        shell: bash
        run: |
          status_line=$(grep -i '^\*\*Status' FREEZE-NOTICE.md 2>/dev/null | head -n1 | tr -d '\r')
          if echo "$status_line" | grep -qiE 'ACTIVE|IN PROGRESS|ONGOING|PHASE'; then
            echo "active=true" >> "$GITHUB_OUTPUT"
            echo "Freeze active: $status_line"
          else
            echo "active=false" >> "$GITHUB_OUTPUT"
            echo "No active freeze detected."
          fi

  validate-links:
    name: Validate Documentation Links
    runs-on: ubuntu-latest
    needs: freeze_guard
    if: ${{ needs.freeze_guard.outputs.active != 'true' }}
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install requests

      - name: Create reports directory
        run: mkdir -p docs/reports

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Run link validation (PR mode)
        if: ${{ github.event_name == 'pull_request' }}
        id: pr_validation
        continue-on-error: true
        run: |
          python scripts/docs/check-links.py \
            --docs-dir ./docs/context \
            --output ./docs/reports/link-validation-pr.json \
            --skip-external \
            --verbose

      - name: Run link validation (scheduled/push mode)
        if: ${{ github.event_name != 'pull_request' }}
        id: full_validation
        continue-on-error: true
        run: |
          python scripts/docs/check-links.py \
            --docs-dir ./docs/context ./docs \
            --output ./docs/reports/link-validation-full.json \
            --timeout 10 \
            --verbose

      - name: Analyze results and determine failure
        if: always()
        id: analyze
        shell: bash
        run: |
          # Find the report file
          if [ -f "./docs/reports/link-validation-pr.json" ]; then
            REPORT_FILE="./docs/reports/link-validation-pr.json"
          else
            REPORT_FILE="./docs/reports/link-validation-full.json"
          fi

          if [ ! -f "$REPORT_FILE" ]; then
            echo "critical=0" >> $GITHUB_OUTPUT
            echo "warning=0" >> $GITHUB_OUTPUT
            echo "external=0" >> $GITHUB_OUTPUT
            echo "total_links=0" >> $GITHUB_OUTPUT
            echo "broken_count=0" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Parse JSON and count by category
          # Critical: link_category='internal' AND link_scope='docs_internal' OR link_category='anchor'
          CRITICAL_BROKEN=$(jq '[.broken_links[] | select((.link_category=="internal" and .link_scope=="docs_internal") or .link_category=="anchor")] | length' $REPORT_FILE)
          # Warning: link_category='internal' AND link_scope='repo_internal'
          WARNING_BROKEN=$(jq '[.broken_links[] | select(.link_category=="internal" and .link_scope=="repo_internal")] | length' $REPORT_FILE)
          # External: link_category='external'
          EXTERNAL_BROKEN=$(jq '[.broken_links[] | select(.link_category=="external")] | length' $REPORT_FILE)
          # Total broken
          TOTAL_BROKEN=$(jq '[.broken_links[]] | length' $REPORT_FILE)
          # Total links checked
          TOTAL_LINKS=$(jq '.summary.total_links' $REPORT_FILE)

          # Output for next steps
          echo "critical=$CRITICAL_BROKEN" >> $GITHUB_OUTPUT
          echo "warning=$WARNING_BROKEN" >> $GITHUB_OUTPUT
          echo "external=$EXTERNAL_BROKEN" >> $GITHUB_OUTPUT
          echo "total_links=$TOTAL_LINKS" >> $GITHUB_OUTPUT
          echo "broken_count=$TOTAL_BROKEN" >> $GITHUB_OUTPUT

          echo "Critical broken links: $CRITICAL_BROKEN"
          echo "Warning broken links: $WARNING_BROKEN"
          echo "External broken links: $EXTERNAL_BROKEN"
          echo "Total links checked: $TOTAL_LINKS"

      - name: Create PR comment with results
        if: ${{ github.event_name == 'pull_request' && always() }}
        uses: actions/github-script@v7
        env:
          CRITICAL: ${{ steps.analyze.outputs.critical }}
          WARNING: ${{ steps.analyze.outputs.warning }}
          EXTERNAL: ${{ steps.analyze.outputs.external }}
          TOTAL_LINKS: ${{ steps.analyze.outputs.total_links }}
          BROKEN_COUNT: ${{ steps.analyze.outputs.broken_count }}
        with:
          script: |
            const critical = parseInt(process.env.CRITICAL) || 0;
            const warning = parseInt(process.env.WARNING) || 0;
            const external = parseInt(process.env.EXTERNAL) || 0;
            const totalLinks = parseInt(process.env.TOTAL_LINKS) || 0;
            const brokenCount = parseInt(process.env.BROKEN_COUNT) || 0;

            let status = '✅ PASS';
            let statusEmoji = '✅';
            if (critical > 0) {
              status = '❌ FAIL';
              statusEmoji = '❌';
            } else if (warning > 0) {
              status = '⚠️ WARNINGS';
              statusEmoji = '⚠️';
            }

            const successRate = totalLinks > 0 ? (((totalLinks - brokenCount) / totalLinks) * 100).toFixed(1) : 100;

            let comment = `## 🔗 Documentation Link Validation Report\n\n`;
            comment += `**Status**: ${statusEmoji} ${status}\n\n`;
            comment += `| Category | Count | Status |\n`;
            comment += `|----------|-------|--------|\n`;
            comment += `| Critical (docs internal) | ${critical} | ${critical > 0 ? '❌' : '✅'} |\n`;
            comment += `| Warnings (repo internal) | ${warning} | ${warning > 0 ? '⚠️' : '✅'} |\n`;
            comment += `| External (skipped on PR) | - | ℹ️ |\n`;
            comment += `| Total links checked | ${totalLinks} | - |\n`;
            comment += `| Success Rate | ${successRate}% | - |\n\n`;

            // Read JSON report for details
            const fs = require('fs');
            const reportFile = './docs/reports/link-validation-pr.json';
            if (fs.existsSync(reportFile)) {
              const report = JSON.parse(fs.readFileSync(reportFile, 'utf8'));

              if (critical > 0) {
                comment += `### ❌ Critical Broken Links (Fail Build)\n\n`;
                const criticalLinks = report.broken_links.filter(
                  link => (link.link_category === 'internal' && link.link_scope === 'docs_internal') ||
                           link.link_category === 'anchor'
                );
                criticalLinks.slice(0, 10).forEach(link => {
                  comment += `- \`${link.file}:${link.line}\` - \`[${link.link_text || 'link'}](${link.link_url})\` - Error: ${link.error}\n`;
                });
                if (criticalLinks.length > 10) {
                  comment += `- ... and ${criticalLinks.length - 10} more critical links\n`;
                }
                comment += '\n';
              }

              if (warning > 0) {
                comment += `### ⚠️ Warnings (Don't Fail Build)\n\n`;
                const warningLinks = report.broken_links.filter(
                  link => link.link_category === 'internal' && link.link_scope === 'repo_internal'
                );
                warningLinks.slice(0, 10).forEach(link => {
                  comment += `- \`${link.file}:${link.line}\` - \`[${link.link_text || 'link'}](${link.link_url})\` - Error: ${link.error}\n`;
                });
                if (warningLinks.length > 10) {
                  comment += `- ... and ${warningLinks.length - 10} more warnings\n`;
                }
                comment += '\n';
              }

              comment += `📊 [Download Full Report](../actions/runs/${context.runId})\n`;
            }

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Documentation Link Validation Report')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment,
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment,
              });
            }

      - name: Upload JSON report as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: link-validation-report-${{ github.run_number }}
          path: docs/reports/link-validation-*.json
          retention-days: 30

      - name: Create GitHub Step Summary
        if: always()
        shell: bash
        run: |
          REPORT_FILE=""
          if [ -f "./docs/reports/link-validation-pr.json" ]; then
            REPORT_FILE="./docs/reports/link-validation-pr.json"
          elif [ -f "./docs/reports/link-validation-full.json" ]; then
            REPORT_FILE="./docs/reports/link-validation-full.json"
          fi

          if [ -z "$REPORT_FILE" ]; then
            exit 0
          fi

          CRITICAL="${{ steps.analyze.outputs.critical }}"
          WARNING="${{ steps.analyze.outputs.warning }}"
          EXTERNAL="${{ steps.analyze.outputs.external }}"
          TOTAL_LINKS="${{ steps.analyze.outputs.total_links }}"
          BROKEN_COUNT="${{ steps.analyze.outputs.broken_count }}"

          echo "## 🔗 Documentation Link Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Links**: $TOTAL_LINKS" >> $GITHUB_STEP_SUMMARY
          echo "**Broken Links**: $BROKEN_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "**Critical Issues**: $CRITICAL" >> $GITHUB_STEP_SUMMARY
          echo "**Warnings**: $WARNING" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Top Broken Links" >> $GITHUB_STEP_SUMMARY
          jq -r '.broken_links[] | "- `\(.file):\(.line)` - \(.error)"' $REPORT_FILE | head -10 >> $GITHUB_STEP_SUMMARY

      - name: Fail job if critical links broken
        if: ${{ steps.analyze.outputs.critical > 0 }}
        run: |
          echo "❌ Critical broken links found: ${{ steps.analyze.outputs.critical }}"
          echo "Build failed due to documentation link validation."
          exit 1

