name: Deploy Docusaurus Documentation

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - '.github/workflows/docs-deploy.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'docs/**'
  workflow_dispatch:  # Manual trigger

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  freeze_guard:
    name: Freeze Guard
    runs-on: ubuntu-latest
    outputs:
      active: ${{ steps.detect.outputs.active }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - id: detect
        name: Detect freeze status
        shell: bash
        run: |
          status_line=$(grep -i '^\*\*Status' FREEZE-NOTICE.md 2>/dev/null | head -n1 | tr -d '\r')
          if echo "$status_line" | grep -qiE 'ACTIVE|IN PROGRESS|ONGOING|PHASE'; then
            echo "active=true" >> "$GITHUB_OUTPUT"
            echo "Freeze active: $status_line"
          else
            echo "active=false" >> "$GITHUB_OUTPUT"
            echo "No active freeze detected."
          fi

  build:
    name: Build Docusaurus Site
    runs-on: ubuntu-latest
    needs: freeze_guard
    if: ${{ needs.freeze_guard.outputs.active != 'true' }}
    defaults:
      run:
        working-directory: docs/docusaurus

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: docs/docusaurus/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build Docusaurus site
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/docusaurus/build

  deploy:
    name: Deploy to GitHub Pages
    needs: [freeze_guard, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.freeze_guard.outputs.active != 'true'
    runs-on: ubuntu-latest

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  link-check:
    name: Check for Broken Links
    runs-on: ubuntu-latest
    needs: freeze_guard
    if: github.event_name == 'pull_request' && needs.freeze_guard.outputs.active != 'true'
    defaults:
      run:
        working-directory: docs/docusaurus

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: docs/docusaurus/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build site
        run: npm run build

      - name: Check for broken links
        uses: lycheeverse/lychee-action@v1
        with:
          args: --verbose --no-progress './docs/docusaurus/build/**/*.html'
          fail: true

  validate-frontmatter:
    name: Validate Front Matter
    runs-on: ubuntu-latest
    needs: freeze_guard
    if: github.event_name == 'pull_request' && needs.freeze_guard.outputs.active != 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Validate YAML front matter
        run: |
          echo "Checking for required front matter fields..."

          # Find all markdown files in docs/context
          FILES=$(find docs/context -name "*.md" -type f)

          ERRORS=0
          for file in $FILES; do
            # Skip if file doesn't have front matter
            if ! grep -q "^---$" "$file"; then
              echo "⚠️  Missing front matter: $file"
              ERRORS=$((ERRORS + 1))
              continue
            fi

            # Extract front matter
            FRONT_MATTER=$(sed -n '/^---$/,/^---$/p' "$file" | sed '1d;$d')

            # Check required fields
            if ! echo "$FRONT_MATTER" | grep -q "^title:"; then
              echo "❌ Missing 'title' field: $file"
              ERRORS=$((ERRORS + 1))
            fi

            if ! echo "$FRONT_MATTER" | grep -q "^domain:"; then
              echo "❌ Missing 'domain' field: $file"
              ERRORS=$((ERRORS + 1))
            fi

            if ! echo "$FRONT_MATTER" | grep -q "^type:"; then
              echo "❌ Missing 'type' field: $file"
              ERRORS=$((ERRORS + 1))
            fi

            if ! echo "$FRONT_MATTER" | grep -q "^status:"; then
              echo "❌ Missing 'status' field: $file"
              ERRORS=$((ERRORS + 1))
            fi
          done

          if [ $ERRORS -gt 0 ]; then
            echo "❌ Found $ERRORS front matter validation errors"
            exit 1
          else
            echo "✅ All front matter validation passed"
          fi
