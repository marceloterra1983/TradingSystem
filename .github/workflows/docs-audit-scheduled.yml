name: Documentation Health Audit

on:
  schedule:
    # Run daily at 2 AM UTC (before link validation at 3 AM)
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      threshold_days:
        description: "Outdated threshold in days"
        required: false
        default: "90"
      skip_external_links:
        description: "Skip external URL validation"
        required: false
        default: "false"

jobs:
  freeze_guard:
    name: Freeze Guard
    runs-on: ubuntu-latest
    outputs:
      active: ${{ steps.detect.outputs.active }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - id: detect
        name: Detect freeze status
        shell: bash
        run: |
          status_line=$(grep -i '^\*\*Status' FREEZE-NOTICE.md 2>/dev/null | head -n1 | tr -d '\r')
          if echo "$status_line" | grep -qiE 'ACTIVE|IN PROGRESS|ONGOING|PHASE'; then
            echo "active=true" >> "$GITHUB_OUTPUT"
            echo "Freeze active: $status_line"
          else
            echo "active=false" >> "$GITHUB_OUTPUT"
            echo "No active freeze detected."
          fi

  run-audit:
    name: Run Documentation Audit
    runs-on: ubuntu-latest
    needs: freeze_guard
    if: ${{ needs.freeze_guard.outputs.active != 'true' }}
    permissions:
      contents: write
      issues: write
      pull-requests: read
    env:
      DOCS_API_URL: ${{ vars.DOCS_API_URL || secrets.DOCS_API_URL || 'http://localhost:3400' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for git tracking

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install -r requirements-docs.txt

      - name: Install jq for JSON parsing
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Create reports directory
        run: mkdir -p docs/reports

      - name: Run documentation audit
        id: audit
        continue-on-error: true
        run: |
          REPORT_DATE=$(date +%Y-%m-%d)
          REPORT_FILE="./docs/reports/${REPORT_DATE}-documentation-audit.md"
          
          bash scripts/docs/audit-documentation.sh \
            --docs-dir ./docs/content \
            --output "$REPORT_FILE" \
            ${{ github.event.inputs.skip_external_links == 'true' && '--skip-external-links' || '' }} \
            --verbose
          
          echo "report_file=$REPORT_FILE" >> "$GITHUB_OUTPUT"
          echo "report_date=$REPORT_DATE" >> "$GITHUB_OUTPUT"

      - name: Extract metrics from JSON reports
        id: metrics
        run: |
          # Find latest audit directory
          AUDIT_DIR=$(find /tmp -maxdepth 1 -name "docs-audit-*" -type d | sort -r | head -n1)
          
          if [ -z "$AUDIT_DIR" ]; then
            echo "No audit data found"
            exit 1
          fi
          
          echo "Found audit data in: $AUDIT_DIR"
          
          # Extract metrics using jq
          FRONTMATTER_JSON="$AUDIT_DIR/frontmatter.json"
          LINKS_JSON="$AUDIT_DIR/links.json"
          DUPLICATES_JSON="$AUDIT_DIR/duplicates.json"
          
          # Calculate health score (same logic as docsHealthMetrics.js calculateHealthScore)
          # Weights: frontmatter 40%, links 30%, duplicates 30%
          HEALTH_SCORE=$(jq -n --slurpfile fm "$FRONTMATTER_JSON" \
                              --slurpfile links "$LINKS_JSON" \
                              --slurpfile dup "$DUPLICATES_JSON" '
            # Extract values with defaults
            ($fm[0].total_files // 1) as $total_files |
            ($fm[0].complete // 0) as $complete_files |
            ($links[0].total_links // 1) as $total_links |
            ($links[0].broken_links // 0) as $broken_links |
            ($dup[0].exact_duplicates // 0) as $exact_duplicates |
            
            # Calculate component scores
            (($complete_files / $total_files) * 100) as $frontmatter_score |
            ((($total_links - $broken_links) / $total_links) * 100) as $links_score |
            ([($exact_duplicates * 2), 50] | min) as $duplicate_penalty |
            (100 - $duplicate_penalty) as $duplicates_score |
            
            # Calculate weighted average
            (($frontmatter_score * 0.4) + ($links_score * 0.3) + ($duplicates_score * 0.3)) |
            
            # Round to 1 decimal place
            (. * 10 | round / 10)
          ')
          echo "health_score=$HEALTH_SCORE" >> "$GITHUB_OUTPUT"
          
          # Total files
          TOTAL_FILES=$(jq -r '.total_files // 0' "$FRONTMATTER_JSON")
          echo "total_files=$TOTAL_FILES" >> "$GITHUB_OUTPUT"
          
          # Broken links
          BROKEN_LINKS=$(jq -r '.broken_links // 0' "$LINKS_JSON")
          echo "broken_links=$BROKEN_LINKS" >> "$GITHUB_OUTPUT"
          
          # Outdated count
          OUTDATED_COUNT=$(jq -r '.outdated_count // 0' "$FRONTMATTER_JSON")
          echo "outdated_count=$OUTDATED_COUNT" >> "$GITHUB_OUTPUT"
          
          # Frontmatter missing
          FRONTMATTER_MISSING=$(jq -r '.missing // 0' "$FRONTMATTER_JSON")
          echo "frontmatter_missing=$FRONTMATTER_MISSING" >> "$GITHUB_OUTPUT"
          
          # Duplicates
          DUPLICATE_GROUPS=$(jq -r '.exact_duplicates // 0' "$DUPLICATES_JSON")
          echo "duplicate_groups=$DUPLICATE_GROUPS" >> "$GITHUB_OUTPUT"
          
          echo "Extracted metrics: health_score=$HEALTH_SCORE, total_files=$TOTAL_FILES, broken_links=$BROKEN_LINKS"

      - name: Update Prometheus metrics via API
        id: update_metrics
        continue-on-error: true
        run: |
          # Find latest audit directory
          AUDIT_DIR=$(find /tmp -maxdepth 1 -name "docs-audit-*" -type d | sort -r | head -n1)
          
          # Combine JSON reports into single payload with health_score
          COMBINED_JSON=$(jq -s --arg health_score "${{ steps.metrics.outputs.health_score }}" '{
            health_score: ($health_score | tonumber),
            frontmatter: .[0],
            links: .[1],
            duplicates: .[2]
          }' \
            "$AUDIT_DIR/frontmatter.json" \
            "$AUDIT_DIR/links.json" \
            "$AUDIT_DIR/duplicates.json")
          
          # Call Documentation API to update metrics
          # Note: This requires Documentation API to be accessible
          # In production, use internal network or VPN
          # Update metrics for docs health dashboard
          DOCS_API_BASE="${DOCS_API_URL%/}"
          curl -X POST "${DOCS_API_BASE}/api/v1/docs/health/update-metrics" \
            -H "Content-Type: application/json" \
            -d "$COMBINED_JSON" \
            --max-time 10 \
            --silent \
            --fail \
            || echo "Failed to update Prometheus metrics (API may not be accessible from CI)"

      - name: Commit audit report
        id: commit
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          REPORT_DATE=$(date +%Y-%m-%d)
          REPORT_FILE="docs/reports/${REPORT_DATE}-documentation-audit.md"
          
          if [ -f "$REPORT_FILE" ]; then
            git add "$REPORT_FILE"
            
            # Check if there are changes to commit
            if git diff --staged --quiet; then
              echo "No changes to commit"
              echo "committed=false" >> "$GITHUB_OUTPUT"
            else
              git commit -m "docs: daily audit report ${REPORT_DATE}

              Health Score: ${{ steps.metrics.outputs.health_score }}/100
              Total Files: ${{ steps.metrics.outputs.total_files }}
              Broken Links: ${{ steps.metrics.outputs.broken_links }}
              Outdated: ${{ steps.metrics.outputs.outdated_count }}
              
              [skip ci]"
              git push origin main
              echo "committed=true" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "Report file not found: $REPORT_FILE"
            echo "committed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Archive old reports
        run: |
          # Create archive directory
          mkdir -p docs/reports/archive
          
          # Move reports older than 30 days to archive
          find docs/reports -maxdepth 1 -name "20*-documentation-audit.md" -type f -mtime +30 \
            -exec mv {} docs/reports/archive/ \;
          
          # Commit archive changes if any
          if [ -n "$(git status --porcelain docs/reports/archive)" ]; then
            git add docs/reports/archive
            git commit -m "docs: archive old audit reports [skip ci]"
            git push origin main
          fi

      - name: Check for health degradation
        id: check_degradation
        run: |
          CURRENT_SCORE=${{ steps.metrics.outputs.health_score }}
          
          # Get previous score from last audit report
          PREV_REPORT=$(find docs/reports -maxdepth 1 -name "20*-documentation-audit.md" -type f | sort -r | sed -n 2p)
          
          if [ -f "$PREV_REPORT" ]; then
            PREV_SCORE=$(grep "Health Score:" "$PREV_REPORT" | head -n1 | grep -oP '\d+\.?\d*' || echo "$CURRENT_SCORE")
            SCORE_DIFF=$(echo "$CURRENT_SCORE - $PREV_SCORE" | bc)
            
            echo "Previous score: $PREV_SCORE"
            echo "Current score: $CURRENT_SCORE"
            echo "Difference: $SCORE_DIFF"
            
            # Check if score dropped by more than 5 points
            if (( $(echo "$SCORE_DIFF < -5" | bc -l) )); then
              echo "degraded=true" >> "$GITHUB_OUTPUT"
              echo "score_diff=$SCORE_DIFF" >> "$GITHUB_OUTPUT"
            else
              echo "degraded=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "No previous report found"
            echo "degraded=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create GitHub Issue for health degradation
        if: steps.check_degradation.outputs.degraded == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const reportDate = '${{ steps.audit.outputs.report_date }}';
            const healthScore = '${{ steps.metrics.outputs.health_score }}';
            const scoreDiff = '${{ steps.check_degradation.outputs.score_diff }}';
            const brokenLinks = '${{ steps.metrics.outputs.broken_links }}';
            const outdatedCount = '${{ steps.metrics.outputs.outdated_count }}';
            const frontmatterMissing = '${{ steps.metrics.outputs.frontmatter_missing }}';
            
            const issueTitle = `Documentation Health Alert: Score dropped to ${healthScore}/100`;
            const issueBody = `## ⚠️ Documentation Health Degradation Detected

            **Health Score Change**: ${scoreDiff} points
            **Current Score**: ${healthScore}/100
            **Date**: ${reportDate}

            ### Issue Summary

            | Metric | Count |
            |--------|-------|
            | Broken Links | ${brokenLinks} |
            | Outdated Documents | ${outdatedCount} |
            | Missing Frontmatter | ${frontmatterMissing} |

            ### Actions Required

            1. Review the [full audit report](../blob/main/docs/reports/${reportDate}-documentation-audit.md)
            2. Fix critical issues (broken links, missing frontmatter)
            3. Update outdated documentation
            4. Monitor health score in [Grafana Dashboard](http://localhost:3000/d/docs-health)

            ### Resources

            - [Documentation Health Dashboard](http://localhost:3400/health) (docs)
            - [Health Dashboard Guide](http://localhost:3400/tools/health-dashboard) (docs)
            - [Automated Code Quality](https://github.com/marceloterra/TradingSystem/blob/main/docs/context/ops/automated-code-quality.md)

            ---
            *This issue was created automatically by the Documentation Health Audit workflow*
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['documentation', 'health', 'automated'],
            });

      - name: Upload audit artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docs-audit-${{ steps.audit.outputs.report_date }}
          path: |
            /tmp/docs-audit-*/
            docs/reports/${{ steps.audit.outputs.report_date }}-documentation-audit.md
          retention-days: 90

      - name: Create workflow summary
        run: |
          echo "# Documentation Health Audit Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date +%Y-%m-%d)" >> $GITHUB_STEP_SUMMARY
          echo "**Health Score**: ${{ steps.metrics.outputs.health_score }}/100" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Key Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Total Files | ${{ steps.metrics.outputs.total_files }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Broken Links | ${{ steps.metrics.outputs.broken_links }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Outdated Documents | ${{ steps.metrics.outputs.outdated_count }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Missing Frontmatter | ${{ steps.metrics.outputs.frontmatter_missing }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Duplicate Groups | ${{ steps.metrics.outputs.duplicate_groups }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check_degradation.outputs.degraded }}" == "true" ]; then
            echo "⚠️ **Health Degradation Detected** (dropped ${{ steps.check_degradation.outputs.score_diff }} points)" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Health Stable or Improved**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Resources" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [View Full Report](../blob/main/docs/reports/${{ steps.audit.outputs.report_date }}-documentation-audit.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [Health Dashboard](http://localhost:3400/health)" >> $GITHUB_STEP_SUMMARY
          echo "- [Grafana Dashboard](http://localhost:3000/d/docs-health)" >> $GITHUB_STEP_SUMMARY
