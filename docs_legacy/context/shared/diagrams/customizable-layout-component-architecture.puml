@startuml
title Customizable Layout System - Component Architecture

!define RECTANGLE class

skinparam component {
  BackgroundColor<<Page>> LightCyan
  BackgroundColor<<Layout>> LightGreen
  BackgroundColor<<UI>> LightBlue
  BackgroundColor<<State>> LightYellow
  BackgroundColor<<External>> LightGray
}

package "Page Components" <<Page>> {
  component "EscopoPageNew" as EscopoPage {
    [7 sections]
    [2 columns default]
  }
  
  component "BancoIdeiasPageNew" as BancoIdeiasPage {
    [6 sections]
    [2 columns default]
  }
  
  component "SettingsPage" as SettingsPage {
    [7 sections]
    [2 columns default]
  }
  
  component "ConnectionsPageNew" as ConnectionsPage {
    [5 sections]
    [3 columns default]
  }
}

package "Layout System" <<Layout>> {
  component "CustomizablePageLayout" as CustomLayout {
    **Props:**
    - pageId: string
    - title: string
    - subtitle?: string
    - sections: Section[]
    - defaultColumns: 1|2|3|4
    
    **Responsibilities:**
    - Coordinate layout, controls, grid
    - Manage useCustomLayout hook
    - Handle responsive breakpoints
  }
  
  component "DraggableGridLayout" as GridLayout {
    **Responsibilities:**
    - Implement drag-and-drop
    - Manage drop zones
    - Visual feedback during drag
    - Distribute cards across columns
    
    **Uses:**
    - @dnd-kit/core (DndContext)
    - @dnd-kit/sortable
    - PointerSensor with 8px threshold
  }
  
  component "LayoutControls" as Controls {
    **Responsibilities:**
    - Column selector (1-4 buttons)
    - Reset button
    - Future: Collapse all/Expand all
    
    **Props:**
    - columns: number
    - setColumns: (n) => void
    - resetLayout: () => void
  }
  
  component "DragHandle" as DragHandle {
    **Responsibilities:**
    - Isolated vertical bar (6px wide)
    - Visual hover feedback
    - Cursor: grab/grabbing
    - Prevents click conflict with header
  }
}

package "UI Components" <<UI>> {
  component "CollapsibleCard" as Card {
    **Props:**
    - cardId: string (unique)
    - defaultCollapsed?: boolean
    
    **Sub-components:**
    - CollapsibleCardHeader
    - CollapsibleCardTitle
    - CollapsibleCardContent
    
    **State:**
    - Internal collapse state
    - Persisted to localStorage
  }
  
  component "PlaceholderSection" as Placeholder {
    **Props:**
    - cardId: string
    - title: string
    - description: string
    - icon?: ReactNode
    
    **Purpose:**
    - WIP features placeholder
    - Consistent styling
    - User-friendly messaging
  }
}

package "State Management" <<State>> {
  component "useCustomLayout Hook" as Hook {
    **State:**
    - columns: number
    - componentLayout: Record<id, columnIndex>
    
    **Methods:**
    - setColumns(n: number)
    - moveComponent(id, newColumnIndex)
    - resetLayout()
    - getComponentColumn(id): number
    
    **Initialization:**
    - Check localStorage for saved layout
    - Apply defaults if no saved layout
  }
  
  database "localStorage" as LocalStorage {
    **Key Format:**
    tradingSystem_layout_{pageId}
    
    **Schema:**
    {
      columns: number,
      componentLayout: {
        [componentId]: columnIndex
      }
    }
    
    **Operations:**
    - getItem() on mount
    - setItem() on every change
    - removeItem() on reset
  }
}

package "External Dependencies" <<External>> {
  component "@dnd-kit/core" as DndCore {
    [DndContext]
    [useSensor]
    [PointerSensor]
    [closestCorners]
  }
  
  component "@dnd-kit/sortable" as DndSortable {
    [SortableContext]
    [useSortable]
    [arrayMove]
  }
  
  component "@dnd-kit/utilities" as DndUtils {
    [CSS utilities]
  }
  
  component "lucide-react" as Icons {
    [Layout icons]
    [Drag indicators]
    [UI icons]
  }
}

' Page Components → Layout System
EscopoPage --> CustomLayout : Render with sections
BancoIdeiasPage --> CustomLayout : Render with sections
SettingsPage --> CustomLayout : Render with sections
ConnectionsPage --> CustomLayout : Render with sections

' Layout System Internal
CustomLayout --> Controls : Pass columns, setColumns, resetLayout
CustomLayout --> GridLayout : Pass sections, columns, moveComponent
CustomLayout --> Hook : Use state and persistence

' Grid Layout → UI Components
GridLayout --> Card : Render each section
GridLayout --> DragHandle : Attach to each card
Card ..> Placeholder : Renders for WIP sections

' State Management
Hook --> LocalStorage : Read/write layout preferences
LocalStorage ..> Hook : Initialize from saved state

' External Dependencies
GridLayout --> DndCore : Use DndContext, sensors
GridLayout --> DndSortable : Use sortable contexts
GridLayout --> DndUtils : Use CSS utilities
Controls --> Icons : Use layout icons
DragHandle --> Icons : Use drag indicators

note right of DragHandle
  **Activation Constraint**
  8px movement threshold prevents
  accidental drags when clicking
  to collapse/expand
end note

note right of Card
  **Isolated Interactions**
  - Drag handle: Vertical bar (drag)
  - Card header: Click (collapse/expand)
  - No conflict between interactions
end note

note bottom of Hook
  **Persistence Strategy**
  - Debounced writes to localStorage
  - Validates componentLayout on load
  - Resets to default on corruption
  - Per-page storage isolation
end note

note bottom of GridLayout
  **Responsive Breakpoints**
  - Mobile (<768px): Always 1 column
  - Tablet (768-1024px): Max 2 columns
  - Desktop (>1024px): User choice (1-4)
end note

note right of LocalStorage
  **Storage Examples**
  tradingSystem_layout_escopo:
  {
    "columns": 2,
    "componentLayout": {
      "overview": 0,
      "objectives": 1,
      "architecture": 0,
      "techstack": 1
    }
  }
end note

note as N1
  **Performance Optimizations**
  - React.memo on section components
  - useMemo for expensive computations
  - Minimal re-renders on drag
  - Virtual scrolling for long lists (future)
end note

@enduml
