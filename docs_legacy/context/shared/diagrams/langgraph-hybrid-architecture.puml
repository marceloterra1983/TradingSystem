@startuml
title LangGraph Hybrid Architecture - Production + Development

package "Production Environment (Port 8111)" {
  component "LangGraph Service\n(FastAPI)" as ProdLG

  package "Shared Infrastructure" {
    database "PostgreSQL\n(Port 5432)" as ProdPG
    database "QuestDB\n(Port 9000)" as ProdQDB
  }

  ProdLG --> ProdPG : Checkpoints
  ProdLG --> ProdQDB : Events
}

package "Development Environment (Port 8112)" {
  component "LangGraph Dev\n(FastAPI + Tracing)" as DevLG

  package "Isolated Infrastructure" {
    database "PostgreSQL Dev\n(Port 5433)" as DevPG
    database "Redis Dev\n(Port 6380)" as DevRedis
  }

  DevLG --> DevPG : Checkpoints
  DevLG --> DevRedis : Pub/Sub
}

package "External Services" {
  component "Agno Agents\n(Port 8200)" as Agno
  component "DocsAPI\n(Port 3400)" as Docs
  component "Firecrawl\n(Port 3600)" as Fire
}

package "Observability" {
  cloud "LangSmith API\n(api.smith.langchain.com)" as LangSmithAPI
  cloud "LangSmith Studio\n(smith.langchain.com)" as Studio
}

ProdLG --> Agno : HTTP
ProdLG --> Docs : HTTP
ProdLG --> Fire : HTTP

DevLG --> Agno : HTTP
DevLG --> Docs : HTTP
DevLG --> Fire : HTTP

DevLG ..> LangSmithAPI : Traces\n(async)
ProdLG ..> LangSmithAPI : Traces\n(optional)

LangSmithAPI --> Studio : Display

actor Developer
Developer --> DevLG : Debug workflows
Developer --> Studio : View traces

actor "CI/CD" as CI
CI --> ProdLG : Integration tests

note right of DevLG
  Development Mode:
  - Isolated data
  - LangSmith enabled
  - Hot reload support
  - Studio integration
end note

note right of ProdLG
  Production Mode:
  - Shared databases
  - Tracing optional
  - Optimized for performance
  - Integration testing
end note

note bottom of LangSmithAPI
  Async trace sending
  Non-blocking workflow execution
  ~10-50ms overhead
end note

@enduml