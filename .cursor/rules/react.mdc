---
description: Regras React para componentes funcionais, hooks e melhores pr√°ticas no TradingSystem Dashboard
globs: frontend/**/*.jsx,frontend/**/*.tsx,**/*.jsx,**/*.tsx
alwaysApply: false
---

# Regras React - TradingSystem Dashboard

## üéØ Princ√≠pios Fundamentais

- Use componentes funcionais com hooks ao inv√©s de componentes de classe
- Use custom hooks para l√≥gica reutiliz√°vel
- Use Context API para gerenciamento de estado quando necess√°rio
- Use valida√ß√£o adequada de props com PropTypes ou TypeScript
- Use React.memo para otimiza√ß√£o de performance quando necess√°rio
- Use fragments para evitar elementos DOM desnecess√°rios
- Use renderiza√ß√£o adequada de listas com keys
- Prefira composi√ß√£o ao inv√©s de heran√ßa

## üèóÔ∏è Padr√µes de Componentes

### Componentes Funcionais
```tsx
// ‚úÖ CORRETO - Componente funcional com hooks
interface UserProfileProps {
  name: string;
  email: string;
}

function UserProfile({ name, email }: UserProfileProps) {
  const [isActive, setIsActive] = useState(false);
  
  return (
    <div>
      <h2>{name}</h2>
      <p>{email}</p>
      <button onClick={() => setIsActive(!isActive)}>
        {isActive ? 'Ativo' : 'Inativo'}
      </button>
    </div>
  );
}

// ‚ùå EVITAR - Componente de classe
class UserProfile extends React.Component {
  // ... c√≥digo legado
}
```

### Custom Hooks
```tsx
// ‚úÖ CORRETO - Custom hook para l√≥gica reutiliz√°vel
function useTradingData(symbol: string) {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        const response = await fetch(`/api/trading/${symbol}`);
        const result = await response.json();
        setData(result);
      } catch (err) {
        setError(err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [symbol]);

  return { data, loading, error };
}
```

### Context API
```tsx
// ‚úÖ CORRETO - Context para estado global
interface TradingContextType {
  portfolio: Portfolio;
  updatePortfolio: (portfolio: Portfolio) => void;
}

const TradingContext = createContext<TradingContextType | undefined>(undefined);

function TradingProvider({ children }: { children: React.ReactNode }) {
  const [portfolio, setPortfolio] = useState<Portfolio>(initialPortfolio);

  const updatePortfolio = useCallback((newPortfolio: Portfolio) => {
    setPortfolio(newPortfolio);
  }, []);

  return (
    <TradingContext.Provider value={{ portfolio, updatePortfolio }}>
      {children}
    </TradingContext.Provider>
  );
}

function useTradingContext() {
  const context = useContext(TradingContext);
  if (context === undefined) {
    throw new Error('useTradingContext must be used within TradingProvider');
  }
  return context;
}
```

## üöÄ Otimiza√ß√µes de Performance

### React.memo
```tsx
// ‚úÖ CORRETO - Memo para componentes pesados
interface TradingCardProps {
  symbol: string;
  price: number;
  change: number;
}

const TradingCard = React.memo(function TradingCard({ 
  symbol, 
  price, 
  change 
}: TradingCardProps) {
  return (
    <div className="trading-card">
      <h3>{symbol}</h3>
      <p>R$ {price.toFixed(2)}</p>
      <p className={change >= 0 ? 'positive' : 'negative'}>
        {change >= 0 ? '+' : ''}{change.toFixed(2)}%
      </p>
    </div>
  );
});
```

### Fragments
```tsx
// ‚úÖ CORRETO - Fragment para evitar divs desnecess√°rias
function TradingDashboard() {
  return (
    <>
      <header>
        <h1>Dashboard de Trading</h1>
      </header>
      <main>
        <TradingChart />
        <TradingTable />
      </main>
      <footer>
        <p>√öltima atualiza√ß√£o: {new Date().toLocaleString()}</p>
      </footer>
    </>
  );
}
```

### Listas com Keys
```tsx
// ‚úÖ CORRETO - Lista com keys √∫nicas
function TradingList({ trades }: { trades: Trade[] }) {
  return (
    <ul>
      {trades.map((trade) => (
        <li key={trade.id}>
          <TradeItem trade={trade} />
        </li>
      ))}
    </ul>
  );
}
```

## üé® Padr√µes Espec√≠ficos do TradingSystem

### Componentes de Dashboard
```tsx
// ‚úÖ CORRETO - Componente de p√°gina do dashboard
interface DashboardPageProps {
  title: string;
  children: React.ReactNode;
  actions?: React.ReactNode;
}

function DashboardPage({ title, children, actions }: DashboardPageProps) {
  return (
    <div className="dashboard-page">
      <div className="page-header">
        <h1>{title}</h1>
        {actions && <div className="page-actions">{actions}</div>}
      </div>
      <div className="page-content">
        {children}
      </div>
    </div>
  );
}
```

### Hooks para Trading
```tsx
// ‚úÖ CORRETO - Hook customizado para dados de mercado
function useMarketData(symbols: string[]) {
  const [data, setData] = useState<Record<string, MarketData>>({});
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchMarketData = async () => {
      setLoading(true);
      try {
        const promises = symbols.map(symbol => 
          fetch(`/api/market/${symbol}`).then(res => res.json())
        );
        const results = await Promise.all(promises);
        
        const marketData = symbols.reduce((acc, symbol, index) => {
          acc[symbol] = results[index];
          return acc;
        }, {} as Record<string, MarketData>);
        
        setData(marketData);
      } catch (error) {
        console.error('Erro ao buscar dados de mercado:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchMarketData();
  }, [symbols]);

  return { data, loading };
}
```

## üìù Conven√ß√µes de Nomenclatura

- **Componentes**: PascalCase (`TradingCard`, `MarketChart`)
- **Hooks**: camelCase come√ßando com 'use' (`useTradingData`, `useMarketData`)
- **Props**: camelCase (`isActive`, `onTradeUpdate`)
- **Estados**: camelCase (`loading`, `marketData`)
- **Fun√ß√µes**: camelCase (`handleTradeClick`, `updatePortfolio`)

## üîß Integra√ß√£o com Stack Atual

### React Query
```tsx
// ‚úÖ CORRETO - Usar React Query para cache de dados
function useTradingData(symbol: string) {
  return useQuery({
    queryKey: ['trading', symbol],
    queryFn: () => fetchTradingData(symbol),
    staleTime: 30000, // 30 segundos
    refetchInterval: 60000, // 1 minuto
  });
}
```

### Zustand
```tsx
// ‚úÖ CORRETO - Usar Zustand para estado global
interface TradingStore {
  portfolio: Portfolio;
  selectedSymbol: string;
  setPortfolio: (portfolio: Portfolio) => void;
  setSelectedSymbol: (symbol: string) => void;
}

const useTradingStore = create<TradingStore>((set) => ({
  portfolio: initialPortfolio,
  selectedSymbol: '',
  setPortfolio: (portfolio) => set({ portfolio }),
  setSelectedSymbol: (symbol) => set({ selectedSymbol: symbol }),
}));
```

## üéØ Checklist de Qualidade

- [ ] Componente √© funcional com hooks?
- [ ] Props s√£o tipadas com TypeScript?
- [ ] Custom hooks extraem l√≥gica reutiliz√°vel?
- [ ] Performance √© otimizada com React.memo quando necess√°rio?
- [ ] Fragments evitam divs desnecess√°rias?
- [ ] Listas usam keys √∫nicas?
- [ ] Composer over inheritance?
- [ ] Context API usado adequadamente para estado global?