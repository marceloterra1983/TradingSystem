# Repository Guidelines

## Project Structure & Module Organization
`DOCS_PRFITDLL/` contains the distributable artifacts and language-specific client examples. Reusable binaries reside under `DOCS_PRFITDLL/bin/{Win32,Win64}/`, while import-ready DLLs are in `DOCS_PRFITDLL/DLLs/{Win32,Win64}/`. Each `DOCS_PRFITDLL/Exemplo <lang>/` folder is a self-contained sample that demonstrates how to load and interact with ProfitDLL from C#, C++, Delphi, or Python. Supplemental product documentation sits beside this folder in the repo root (`PRD_*.MD`) and in `DOCS_PRFITDLL/Manual/`.

## Build, Test, and Development Commands
Use language-native tooling from the repository root:
- `dotnet restore "DOCS_PRFITDLL/Exemplo C#/ProfitDLL.csproj"` then `dotnet build ...` to compile the C# sample against the bundled DLLs.
- `cl /EHsc "DOCS_PRFITDLL/Exemplo C++/main.cpp" /I "DOCS_PRFITDLL/Exemplo C++"` (or an equivalent `g++ -std=c++17` invocation) produces the native example executable.
- `python -m venv .venv && .venv\Scripts\Activate.ps1; python DOCS_PRFITDLL/Exemplo Python/main.py` exercises the Python bindings.
- When updating DLLs, copy fresh binaries into both `DOCS_PRFITDLL/bin/*` and `DOCS_PRFITDLL/DLLs/*` to keep development and distribution paths aligned.

## Coding Style & Naming Conventions
Match the dominant style of each sample: PascalCase types and methods in C#, UpperCamelCase classes with `snake_case` functions in C++, and `lowercase_with_underscores` for Python functions. Use 4-space indentation across languages. Keep interop signatures synchronized with the official ProfitDLL headers; regenerate C# P/Invoke structs with `[StructLayout]` attributes before widening fields.

## Testing Guidelines
At minimum, add smoke tests that load the DLL and validate a round-trip call per language. Place C# integration tests under `DOCS_PRFITDLL/Exemplo C#/Tests/` and run them with `dotnet test`. For Python, prefer `pytest` sessions (`pytest DOCS_PRFITDLL/Exemplo Python/tests`). Capture baseline fixture data with the mock DLL when full market connectivity is unavailable.

## Commit & Pull Request Guidelines
Follow Conventional Commits (`feat:`, `fix:`, `chore:`) so release notes can be assembled automatically. Keep commits scoped to a single language sample or binary refresh. Pull requests must describe user-facing effects, reference the relevant PRD file, and include before/after console output or screenshots for UI-affecting changes. Request review from a platform maintainer before merging.

## Security & Configuration Tips
Do not check in API keys or customer endpoints; store them in a local `.env` ignored by default. Validate redistributed DLLs and record their versions in the project documentation before tagging a release.
