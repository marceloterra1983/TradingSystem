@startuml Service Launcher - Component Architecture
!theme plain
skinparam backgroundColor #FEFEFE
skinparam componentStyle rectangle

title Service Launcher - Component Architecture

package "Service Launcher API (Port 3500)" {
  component "Express App" as express {
    [CORS Middleware] as cors
    [Rate Limiter] as rate
    [JSON Parser] as json
  }
  
  component "API Endpoints" {
    [GET /health] as health
    [GET /api/status] as status
    [POST /launch] as launch
  }
  
  component "Health Monitoring" {
    [evaluateService()] as eval
    [gatherServiceStatuses()] as gather
    [summarizeStatuses()] as summarize
    [sortResultsBySeverity()] as sort
  }
  
  component "Service Launch" {
    [detectTerminal()] as detect
    [launchWindows()] as winlaunch
    [launchUnix()] as unixlaunch
  }
  
  component "Configuration" {
    [resolvePort()] as port
    [toHealthUrl()] as url
    [SERVICE_TARGETS] as targets
  }
  
  component "Utils" {
    [Pino Logger] as logger
  }
}

package "External Systems" {
  database ".env (Project Root)" as env
  component "Dashboard UI\n:3103" as dashboard
  component "Library API\n:3200" as library
  component "TP Capital\n:3200" as tp
  component "B3 API\n:3302" as b3
  component "Docs API\n:3400" as docs
  component "Terminal\n(wt.exe/cmd/bash)" as terminal
}

' Configuration flow
env --> express: Load env vars\n(dotenv from root)
targets --> eval: Service definitions
port --> targets: Resolve ports
url --> targets: Build health URLs

' Middleware chain
cors --> rate
rate --> json
json --> health
json --> status
json --> launch

' Health check flow
status --> gather: Request statuses
gather --> eval: For each service
eval --> library: GET /health
eval --> tp: GET /health
eval --> b3: GET /health
eval --> docs: GET /health
eval --> summarize: Collect results
summarize --> sort: Order by severity
sort --> status: Return JSON

' Launch flow
launch --> detect: Check OS/terminal
detect --> winlaunch: Windows
detect --> unixlaunch: Linux
winlaunch --> terminal: Spawn wt.exe/cmd
unixlaunch --> terminal: Spawn gnome-terminal
terminal --> "New Process": Start service

' Logging
health --> logger: Log requests
status --> logger: Log health checks
launch --> logger: Log launch events
eval --> logger: Log probe results

' Dashboard integration
dashboard --> health: Periodic polling
dashboard --> status: Service status
dashboard --> launch: Launch services

note right of express
**Middleware Chain:**
1. CORS (configured origins)
2. Rate Limiting (200/min)
3. JSON body parser
4. Route handlers
end note

note bottom of logger
**Structured Logging:**
- Development: Pretty print
- Production: JSON
- Levels: debug, info, warn, error
- Events: startup, health_check,
  service_launch, status_aggregation
end note

note left of targets
**Monitored Services:**
- 11 services total
- Categories: api, ui, docs,
  monitoring, data, internal
- Configurable via env vars
end note

@enduml













