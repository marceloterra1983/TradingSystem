@startuml Service Launcher - Health Check Flow
!theme plain
skinparam backgroundColor #FEFEFE
skinparam sequenceMessageAlign center

title Service Launcher - Health Check Flow

actor Dashboard as dash
participant "Service Launcher\n:3500" as launcher
participant "Library API\n:3200" as library
participant "Docs API\n:3400" as docs
database Logger as log

== Health Check Request ==

dash -> launcher: GET /api/status
activate launcher

launcher -> log: Log status check start
activate log
log --> launcher: Logged
deactivate log

== Parallel Health Probes ==

par Service probing
    launcher -> library: GET /health\n(timeout: 2.5s)
    activate library
    library --> launcher: 200 OK\n{"status": "ok"}
    deactivate library
    launcher -> docs: GET /health\n(timeout: 2.5s)
    activate docs
    docs --> launcher: 503 Service Unavailable
    deactivate docs
end

== Calculate Metrics ==

launcher -> launcher: Calculate latencies\n(library: 85ms, docs: timeout)
launcher -> launcher: Determine statuses\n(library: ok, docs: down)
launcher -> launcher: Sort by severity\n(down > degraded > ok)
launcher -> launcher: Aggregate metrics\n(overallStatus, degradedCount, etc)

launcher -> log: Log aggregated status
activate log
log --> launcher: Logged
deactivate log

== Return Response ==

launcher --> dash: 200 OK\n{\n  "overallStatus": "degraded",\n  "totalServices": 11,\n  "degradedCount": 1,\n  "downCount": 1,\n  "averageLatencyMs": 102,\n  "services": [...]\n}
deactivate launcher

dash -> dash: Update UI\n(show status indicators)

note right of launcher
**Health Check Logic:**
- ok: HTTP 2xx within timeout
- degraded: HTTP 4xx/5xx received
- down: Timeout or connection error

**Metrics:**
- Average latency from successful probes
- Count services by status
- Overall = worst individual status
end note

@enduml













