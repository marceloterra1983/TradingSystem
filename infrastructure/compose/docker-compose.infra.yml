name: infrastructure

# Infrastructure Stack
# LangGraph + LlamaIndex + Qdrant + Agno + PostgreSQL + QuestDB

services:
  # ============================================================================
  # LangGraph - Multi-agent workflow orchestration
  # ============================================================================
  langgraph:
    container_name: infra-langgraph
    image: "${IMG_INFRA_LANGGRAPH:-img-infra-langgraph}:${IMG_VERSION:-2025.10.19}"
    platform: linux/amd64
    command: ["python", "server.py"]
    restart: unless-stopped
    ports:
      - "8111:8111"
    env_file:
      - ../../.env  # Load from centralized .env
    environment:
      - LANGGRAPH_PORT=${LANGGRAPH_PORT:-8111}
      - LANGGRAPH_ENV=${LANGGRAPH_ENV:-production}
      - LANGGRAPH_LOG_LEVEL=${LANGGRAPH_LOG_LEVEL:-INFO}
      # Database connections (Docker networking)
      - POSTGRES_HOST=data-postgress-langgraph
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-tradingsystem}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - QUESTDB_HOST=data-questdb
      - QUESTDB_HTTP_PORT=9000  # Internal port (Docker network)
      - QUESTDB_PG_PORT=8812     # Internal port (Docker network)
      - QUESTDB_INFLUX_PORT=9009 # Internal port (Docker network)
      # Service URLs (Docker networking)
      - AGNO_API_URL=http://infra-agno-agents:8200
      - DOCS_API_URL=http://docs-api:3400
      - FIRECRAWL_PROXY_URL=http://firecrawl-proxy:3600
      # Feature flags
      - ENABLE_TRADING_WORKFLOWS=${ENABLE_TRADING_WORKFLOWS:-true}
      - ENABLE_DOCS_WORKFLOWS=${ENABLE_DOCS_WORKFLOWS:-true}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
    volumes:
      - ../../backend/data/runtime/langgraph:/app/data
    networks:
      - infra
      - tradingsystem_backend
    extra_hosts:
      - "docs-api:host-gateway"
      - "firecrawl-proxy:host-gateway"
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8111/health"]
      interval: 30s
      timeout: 10s
      start_period: 15s
      retries: 3
    labels:
      - "com.tradingsystem.stack=infrastructure"
      - "com.tradingsystem.service=infra-langgraph"
      - "com.tradingsystem.description=LangGraph workflow orchestration v2.0"

  # ============================================================================
  # LlamaIndex Ingestion Service - Document indexing
  # ============================================================================
  llamaindex-ingestion:
    image: "${IMG_INFRA_LLAMAINDEX_INGESTION:-img-infra-llamaindex-ingestion}:${IMG_VERSION:-2025.10.19}"
    platform: linux/amd64
    container_name: infra-llamaindex-ingestion
    env_file:
      - ../../.env
    user: "1000:1000"
    volumes:
      - type: bind
        source: ../../docs
        target: /app/docs
        read_only: true
      - type: bind
        source: /tmp/llamaindex
        target: /app/data
    environment:
      - QDRANT_HOST=data-qdrant
      - QDRANT_PORT=6333
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
      - infra
      - tradingsystem_backend
    labels:
      - "com.tradingsystem.stack=infrastructure"
      - "com.tradingsystem.service=infra-llamaindex-ingestion"
      - "com.tradingsystem.description=Document ingestion pipeline"


  # ============================================================================
  # LlamaIndex Query Service - Semantic search & retrieval
  # ============================================================================
  llamaindex-query:
    image: "${IMG_INFRA_LLAMAINDEX_QUERY:-img-infra-llamaindex-query}:${IMG_VERSION:-2025.10.19}"
    platform: linux/amd64
    container_name: infra-llamaindex-query
    env_file:
      - ../../.env
    restart: unless-stopped
    ports:
      - "3450:8000"  # Query service API port
    environment:
      - QDRANT_HOST=data-qdrant
      - QDRANT_PORT=6333
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-100}
      - RATE_LIMIT_PERIOD=${RATE_LIMIT_PERIOD:-60}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - type: bind
        source: ../../docs
        target: /app/docs
        read_only: true
      - type: bind
        source: /tmp/llamaindex
        target: /app/data
    networks:
      - infra
      - tradingsystem_backend
    labels:
      - "com.tradingsystem.stack=infrastructure"
      - "com.tradingsystem.service=infra-llamaindex-query"
      - "com.tradingsystem.description=Query & retrieval API"

  # ============================================================================
  # Agno Agents - Multi-agent trading system
  # ============================================================================
  agno-agents:
    container_name: infra-agno-agents
    image: "${IMG_INFRA_AGNO_AGENTS:-img-infra-agno-agents}:${IMG_VERSION:-2025.10.19}"
    platform: linux/amd64
    restart: unless-stopped
    ports:
      - "8200:8200"  # Main API port
    env_file:
      - ../../.env  # Load from centralized .env
    environment:
      - AGNO_PORT=${AGNO_PORT:-8200}
      - AGNO_LOG_LEVEL=${AGNO_LOG_LEVEL:-INFO}
      - AGNO_MODEL_PROVIDER=${AGNO_MODEL_PROVIDER:-openai}
      - AGNO_MODEL_NAME=${AGNO_MODEL_NAME:-gpt-4o}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AGNO_ENABLE_METRICS=${AGNO_ENABLE_METRICS:-true}
      - AGNO_RATE_LIMIT_REQUESTS=${AGNO_RATE_LIMIT_REQUESTS:-100}
      - AGNO_RATE_LIMIT_PERIOD=${AGNO_RATE_LIMIT_PERIOD:-60}
      - AGNO_CORS_ORIGINS=${AGNO_CORS_ORIGINS:-http://localhost:3103,http://localhost:3004}
      - AGNO_ENABLE_TRACING=${AGNO_ENABLE_TRACING:-false}
    volumes:
      - ../../backend/data/runtime/agno:/app/data  # Persistent data
    networks:
      - infra
      - tradingsystem_backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8200/health"]
      interval: 30s
      timeout: 10s
      start_period: 5s
      retries: 3
    labels:
      - "com.tradingsystem.stack=infrastructure"
      - "com.tradingsystem.service=infra-agno-agents"
      - "com.tradingsystem.description=Multi-agent trading system"

# Networks
networks:
  infra:
    name: tradingsystem_infra
    external: true
  tradingsystem_backend:
    name: tradingsystem_backend
    external: true
  tradingsystem_data:
    external: true

# Volumes
volumes:
  langgraph_data:
