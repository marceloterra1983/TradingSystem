name: database

services:
  timescaledb:
    container_name: data-timescaledb
    image: "${IMG_DATA_TIMESCALEDB:-img-data-timescaledb}:${IMG_VERSION:-2025.10.19}"
    platform: linux/amd64
    restart: unless-stopped
    # CENTRALIZED ENV: References root .env file
    env_file:
      - ../../.env
    environment:
      POSTGRES_DB: ${TIMESCALEDB_DB:-tradingsystem}
      POSTGRES_USER: ${TIMESCALEDB_USER:-timescale}
      POSTGRES_PASSWORD: ${TIMESCALEDB_PASSWORD:-pass_timescale}
      TIMESCALEDB_TELEMETRY: 'off'
    ports:
      - '${TIMESCALEDB_PORT:-5433}:5432'
    volumes:
      - timescaledb-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', '${TIMESCALEDB_USER:-timescale}']
      interval: 30s
      timeout: 5s
      retries: 5
    labels:
      - 'com.tradingsystem.stack=database'
      - 'com.tradingsystem.service=timescaledb'
      - 'com.tradingsystem.description=PostgreSQL 15 + TimescaleDB cluster'

  timescaledb-backup:
    container_name: data-timescaledb-backup
    image: "${IMG_DATA_TIMESCALEDB_BACKUP:-img-data-timescaledb-backup}:${IMG_VERSION:-2025.10.19}"
    platform: linux/amd64
    restart: unless-stopped
    # CENTRALIZED ENV: References root .env file
    env_file:
      - ../../.env
    environment:
      POSTGRES_HOST: timescaledb
      POSTGRES_DB: ${TIMESCALEDB_DB:-tradingsystem}
      POSTGRES_USER: ${TIMESCALEDB_USER:-timescale}
      POSTGRES_PASSWORD: ${TIMESCALEDB_PASSWORD:-pass_timescale}
      SCHEDULE: ${TIMESCALEDB_BACKUP_CRON:-0 2 * * *}
      BACKUP_DIR: /backups
      POSTGRES_EXTRA_OPTS: '--format=custom --verbose'
    volumes:
      - timescaledb-backups:/backups
    depends_on:
      - timescaledb
    labels:
      - 'com.tradingsystem.stack=database'
      - 'com.tradingsystem.service=timescaledb-backup'
      - 'com.tradingsystem.description=Nightly dumps for TimescaleDB'

  timescaledb-exporter:
    container_name: data-timescaledb-exporter
    image: "${IMG_DATA_TIMESCALEDB_EXPORTER:-img-data-timescaledb-exporter}:${IMG_VERSION:-2025.10.19}"
    platform: linux/amd64
    restart: unless-stopped
    # CENTRALIZED ENV: References root .env file
    env_file:
      - ../../.env
    environment:
      DATA_SOURCE_URI: 'timescaledb:5432/${TIMESCALEDB_DB:-tradingsystem}?sslmode=disable'
      DATA_SOURCE_USER: ${TIMESCALEDB_USER:-timescale}
      DATA_SOURCE_PASS: ${TIMESCALEDB_PASSWORD:-pass_timescale}
    ports:
      - '${TIMESCALEDB_EXPORTER_PORT:-9187}:9187'
    depends_on:
      - timescaledb
    labels:
      - 'com.tradingsystem.stack=database'
      - 'com.tradingsystem.service=timescaledb-exporter'
      - 'com.tradingsystem.description=Prometheus exporter for TimescaleDB'

  timescaledb-pgadmin:
    container_name: data-timescaledb-pgadmin
    image: "${IMG_DATA_TIMESCALEDB_PGADMIN:-img-data-timescaledb-pgadmin}:${IMG_VERSION:-2025.10.19}"
    platform: linux/amd64
    restart: unless-stopped
    # CENTRALIZED ENV: References root .env file
    env_file:
      - ../../.env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: ${PGADMIN_LISTEN_PORT:-5050}
      PGADMIN_CONFIG_X_FRAME_OPTIONS: "\"\""
      PGADMIN_CONFIG_CONTENT_SECURITY_POLICY: "\"default-src ws: http: data: blob: 'unsafe-inline' 'unsafe-eval'; frame-ancestors 'self' http://localhost:3103 http://127.0.0.1:3103;\""
    ports:
      - '127.0.0.1:${PGADMIN_HOST_PORT:-5050}:${PGADMIN_LISTEN_PORT:-5050}'
    volumes:
      - timescaledb-pgadmin:/var/lib/pgadmin
    depends_on:
      - timescaledb
    labels:
      - 'com.tradingsystem.stack=database'
      - 'com.tradingsystem.service=timescaledb-pgadmin'
      - 'com.tradingsystem.description=pgAdmin 4 web UI for TimescaleDB'
    networks:
      - default
      - tradingsystem_data

  # Lightweight PostgreSQL web client for quick TimescaleDB queries during local development
  timescaledb-pgweb:
    container_name: data-timescaledb-pgweb
    image: "${IMG_DATA_TIMESCALEDB_PGWEB:-img-data-timescaledb-pgweb}:${IMG_VERSION:-2025.10.19}"
    platform: linux/amd64
    restart: unless-stopped
    # CENTRALIZED ENV: References root .env file
    env_file:
      - ../../.env
    environment:
      DATABASE_URL: 'postgres://${TIMESCALEDB_USER:-timescale}:${TIMESCALEDB_PASSWORD:-pass_timescale}@timescaledb:5432/${TIMESCALEDB_DB:-tradingsystem}?sslmode=disable'
      PGWEB_SESSIONS: '1'
    ports:
      - '127.0.0.1:${PGWEB_PORT:-8081}:8081'
    volumes:
      - timescaledb-pgweb:/data
    healthcheck:
      test: ['CMD-SHELL', 'curl -fsS http://127.0.0.1:8081/ || exit 1']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      - timescaledb
    labels:
      - 'com.tradingsystem.stack=database'
      - 'com.tradingsystem.service=timescaledb-pgweb'
      - 'com.tradingsystem.description=Lightweight PostgreSQL web client for quick queries'

  # Optional Adminer UI for full CRUD management when pgAdmin is not required
  timescaledb-adminer:
    container_name: data-timescaledb-adminer
    image: "${IMG_DATA_TIMESCALEDB_ADMINER:-img-data-timescaledb-adminer}:${IMG_VERSION:-2025.10.19}"
    restart: unless-stopped
    # CENTRALIZED ENV: References root .env file
    env_file:
      - ../../.env
    environment:
      ADMINER_DEFAULT_SERVER: timescaledb
      ADMINER_DESIGN: pepa-linha
    ports:
      - '127.0.0.1:${ADMINER_PORT:-8082}:8080'
    depends_on:
      - timescaledb
    profiles:
      - optional
    platform: linux/amd64
    healthcheck:
      test: ['CMD-SHELL', 'wget -qO- http://127.0.0.1:8080/ >/dev/null 2>&1 || exit 1']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    labels:
      - 'com.tradingsystem.stack=database'
      - 'com.tradingsystem.service=timescaledb-adminer'
      - 'com.tradingsystem.description=Adminer database management (optional, lightweight alternative)'

  # Optional Azimutt schema explorer for collaborative ERD visualization when mapping data models
  timescaledb-azimutt:
    container_name: data-timescaledb-azimutt
    image: "${IMG_DATA_TIMESCALEDB_AZIMUTT:-img-data-timescaledb-azimutt}:${IMG_VERSION:-2025.10.19}"
    restart: unless-stopped
    platform: linux/amd64
    # CENTRALIZED ENV: References root .env file
    env_file:
      - ../../.env
    environment:
      DATABASE_URL: 'ecto://${TIMESCALEDB_USER:-timescale}:${TIMESCALEDB_PASSWORD:-pass_timescale}@timescaledb:5432/${TIMESCALEDB_DB:-tradingsystem}?ssl=false'
      PORT: '4000'
      PHX_HOST: ${AZIMUTT_PHX_HOST:-localhost}
      SECRET_KEY_BASE: ${AZIMUTT_SECRET_KEY_BASE:-change-me-secret}
      FILE_STORAGE_ADAPTER: ${AZIMUTT_FILE_STORAGE_ADAPTER:-local}
      AUTH_PASSWORD: ${AZIMUTT_AUTH_PASSWORD:-true}
    ports:
      - '127.0.0.1:${AZIMUTT_PORT:-8084}:4000'
    depends_on:
      - timescaledb
    profiles:
      - optional
    healthcheck:
      test: ['CMD-SHELL', 'bash -c "exec 6<>/dev/tcp/127.0.0.1/4000 && exec 6>&- 6<&-"']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s
    labels:
      - 'com.tradingsystem.stack=database'
      - 'com.tradingsystem.service=timescaledb-azimutt'
      - 'com.tradingsystem.description=ERD visualization and schema exploration (optional)'

  data-postgress-langgraph:
    image: "${IMG_DATA_POSTGRESS_LANGGRAPH:-img-data-postgress-langgraph}:${IMG_VERSION:-2025.10.19}"
    container_name: data-postgress-langgraph
    restart: unless-stopped
    platform: linux/amd64
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-tradingsystem}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - langgraph-postgres:/var/lib/postgresql/data
      - ../../backend/data/postgresql/schemas:/docker-entrypoint-initdb.d:ro
    networks:
      - tradingsystem_backend
      - tradingsystem_infra
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "com.tradingsystem.stack=database"
      - "com.tradingsystem.service=data-postgress-langgraph"
      - "com.tradingsystem.description=PostgreSQL for LangGraph checkpoints"

  data-qdrant:
    image: "${IMG_DATA_QDRANT:-img-data-qdrant}:${IMG_VERSION:-2025.10.19}"
    container_name: data-qdrant
    restart: unless-stopped
    platform: linux/amd64
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT_ALLOW_RECOVERY=true
      - QDRANT_ENABLE_TLS=false
      - QDRANT_LOG_LEVEL=INFO
    networks:
      - tradingsystem_infra
      - tradingsystem_backend
    labels:
      - "com.tradingsystem.stack=database"
      - "com.tradingsystem.service=data-qdrant"
      - "com.tradingsystem.description=Vector database"

  data-questdb:
    image: "${IMG_DATA_QUESTDB:-img-data-questdb}:${IMG_VERSION:-2025.10.19}"
    container_name: data-questdb
    restart: unless-stopped
    platform: linux/amd64
    ports:
      - "9002:9000"
      - "9010:9009"
      - "8813:8812"
    environment:
      - QDB_TELEMETRY_ENABLED=false
      - QDB_LOG_LEVEL=INFO
    volumes:
      - questdb_data:/var/lib/questdb
    networks:
      - tradingsystem_infra
      - tradingsystem_backend
    healthcheck:
      test: ["CMD-SHELL", "test -f /var/lib/questdb/db/tables.d.0"]
      interval: 30s
      timeout: 5s
      start_period: 15s
      retries: 5
    labels:
      - "com.tradingsystem.stack=database"
      - "com.tradingsystem.service=data-questdb"
      - "com.tradingsystem.description=Time-series database for event logs"

networks:
  default:
    name: Database_default
    driver: bridge
  tradingsystem_data:
    external: true
  tradingsystem_backend:
    external: true
  tradingsystem_infra:
    external: true

volumes:
  timescaledb-data:
  timescaledb-backups:
  timescaledb-pgadmin:
  timescaledb-pgweb:
  langgraph-postgres:
  qdrant_data:
  questdb_data:
