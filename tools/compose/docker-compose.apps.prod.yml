name: apps-production

services:
  # ========================================
  # TP Capital API (Trading Signals)
  # Production Configuration
  # ========================================
  tp-capital-api:
    build:
      context: ../../apps/tp-capital/api
      dockerfile: Dockerfile  # Production Dockerfile
    image: tp-capital-api:production
    container_name: tp-capital-api

    # Load environment from centralized root .env
    env_file:
      - ../../.env

    ports:
      - "4005:4005"
    environment:
      # Server
      - PORT=4005
      - NODE_ENV=production
      - LOG_LEVEL=warn  # Production: less verbose logging

      # TimescaleDB Connection
      # Note: Credentials loaded from root .env via env_file directive
      - TIMESCALEDB_SCHEMA=tp_capital

      # CORS (restrict to production domain)
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3103}

      # Database Pool (production tuning)
      - DB_POOL_MAX=20
      - DB_POOL_IDLE_TIMEOUT=60000
      - DB_POOL_CONNECTION_TIMEOUT=5000

      # Rate Limiting (stricter in production)
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100

    networks:
      - tradingsystem_backend

    # Note: TimescaleDB dependency is external (docker-compose.database.yml)
    # Ensure TimescaleDB is running before starting this service:
    #   docker compose -f tools/compose/docker-compose.database.yml up -d timescaledb

    restart: always  # Production: always restart on failure

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4005/health', (r) => { process.exit(r.statusCode === 200 ? 0 : 1) })"]
      interval: 60s  # Production: less frequent checks
      timeout: 10s
      retries: 3
      start_period: 60s

    logging:
      driver: json-file
      options:
        max-size: "50m"  # Production: larger log files
        max-file: "5"

  # ========================================
  # Workspace Service (Ideas & Documentation)
  # Production Configuration
  # ========================================
  workspace:
    build:
      context: ../../backend/api/workspace
      dockerfile: Dockerfile  # Production Dockerfile
    image: workspace-service:production
    container_name: workspace-service
    ports:
      - "3200:3200"
    environment:
      # Server
      - WORKSPACE_PORT=3200
      - NODE_ENV=production
      - LOG_LEVEL=warn  # Production: less verbose logging

      # TimescaleDB Connection
      - TIMESCALEDB_HOST=${TIMESCALEDB_HOST:-timescaledb}
      - TIMESCALEDB_PORT=${TIMESCALEDB_PORT:-5432}
      - TIMESCALEDB_DATABASE=${TIMESCALEDB_DATABASE:-APPS-TPCAPITAL}
      - TIMESCALEDB_USER=${TIMESCALEDB_USER:-timescale}
      - TIMESCALEDB_PASSWORD=${TIMESCALEDB_PASSWORD:-pass_timescale}

      # Database Strategy (TimescaleDB only)
      - LIBRARY_DB_STRATEGY=timescaledb

    networks:
      - tradingsystem_backend

    restart: always  # Production: always restart on failure

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3200/health', (r) => { process.exit(r.statusCode === 200 ? 0 : 1) })"]
      interval: 60s  # Production: less frequent checks
      timeout: 10s
      retries: 3
      start_period: 60s

    logging:
      driver: json-file
      options:
        max-size: "50m"  # Production: larger log files
        max-file: "5"

  # ========================================
  # TimescaleDB (Shared Database)
  # ========================================
  # Note: Uses existing TimescaleDB from database stack
  # Must be started separately via:
  #   docker compose -f tools/compose/docker-compose.database.yml up -d timescaledb

# ========================================
# Networks
# ========================================
networks:
  tradingsystem_backend:
    name: tradingsystem_backend
    external: true  # Use existing network from infrastructure stack
