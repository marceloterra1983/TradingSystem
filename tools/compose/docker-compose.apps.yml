name: apps

services:
  # ========================================
  # TP Capital API (Trading Signals)
  # ========================================
  tp-capital-api:
    build:
      context: ../../apps/tp-capital
      dockerfile: Dockerfile.dev
    container_name: tp-capital-api

    # Load environment from centralized root .env
    env_file:
      - ../../.env

    ports:
      - "4005:4005"
    environment:
      # Server
      - PORT=4005
      - NODE_ENV=development
      - LOG_LEVEL=info

      # TimescaleDB Connection (TP Capital schema)
      - TIMESCALEDB_HOST=${TIMESCALEDB_HOST:-timescaledb}
      - TIMESCALEDB_PORT=${TIMESCALEDB_PORT:-5432}
      - TIMESCALEDB_DATABASE=${TIMESCALEDB_DATABASE:-APPS-TPCAPITAL}
      - TIMESCALEDB_USER=${TIMESCALEDB_USER:-timescale}
      - TIMESCALEDB_PASSWORD=${TIMESCALEDB_PASSWORD:-pass_timescale}
      - TIMESCALEDB_SCHEMA=tp_capital

      # Gateway Database Connection (for polling messages)
      # Note: Override DB_URL from .env to use Docker network hostname
      - TELEGRAM_GATEWAY_DB_URL=postgresql://timescale:pass_timescale@timescaledb:5432/APPS-TELEGRAM-GATEWAY
      - GATEWAY_DATABASE_HOST=timescaledb
      - GATEWAY_DATABASE_PORT=5432
      - GATEWAY_DATABASE_NAME=APPS-TELEGRAM-GATEWAY
      - GATEWAY_DATABASE_SCHEMA=telegram_gateway
      - GATEWAY_DATABASE_USER=timescale
      - GATEWAY_DATABASE_PASSWORD=pass_timescale

      # Gateway Configuration
      - GATEWAY_POLLING_INTERVAL_MS=${GATEWAY_POLLING_INTERVAL_MS:-5000}
      - GATEWAY_SIGNALS_CHANNEL_ID=${GATEWAY_SIGNALS_CHANNEL_ID:--1001649127710}
      - GATEWAY_BATCH_SIZE=${GATEWAY_BATCH_SIZE:-100}

      # Telegram (optional - for bot mode)
      - TELEGRAM_INGESTION_BOT_TOKEN=${TELEGRAM_INGESTION_BOT_TOKEN:-}
      - TELEGRAM_MODE=${TELEGRAM_MODE:-gateway-polling}
      
      # Telegram Gateway Connection (host service)
      - TELEGRAM_GATEWAY_URL=http://host.docker.internal:4006
      - TELEGRAM_GATEWAY_PORT=4006

      # CORS
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3103}

      # Database Pool
      - DB_POOL_MAX=10
      - DB_POOL_IDLE_TIMEOUT=30000
      - DB_POOL_CONNECTION_TIMEOUT=5000

      # Rate Limiting (Aumentado para comportar dashboard auto-refresh)
      - RATE_LIMIT_WINDOW_MS=60000
      - RATE_LIMIT_MAX_REQUESTS=100

    volumes:
      # Hot-reload: mount source code
      - ../../apps/tp-capital/src:/app/src:ro
      - ../../apps/tp-capital/public:/app/public:ro

      # Anonymous volume prevents overwrite
      - /app/node_modules

    networks:
      - tradingsystem_backend

    # Allow container to access host services (Telegram Gateway)
    extra_hosts:
      - "host.docker.internal:host-gateway"

    # Note: TimescaleDB must be started first via docker-compose.database.yml
    # The service will retry connections automatically on startup

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4005/health', (r) => { process.exit(r.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # ========================================
  # Workspace Service (Ideas & Documentation)
  # ========================================
  workspace:
    build:
      context: ../../backend/api/workspace
      dockerfile: Dockerfile.dev
    container_name: workspace-service

    env_file:
      - ../../.env

    ports:
      - "3200:3200"
    environment:
      # Server
      - WORKSPACE_PORT=3200
      - NODE_ENV=development
      - LOG_LEVEL=info

      # TimescaleDB Connection
      - TIMESCALEDB_HOST=timescaledb
      - TIMESCALEDB_PORT=5432
      - WORKSPACE_DATABASE=APPS-WORKSPACE
      - TIMESCALEDB_USER=timescale
      - TIMESCALEDB_PASSWORD=pass_timescale

      # Database Strategy (TimescaleDB only)
      - LIBRARY_DB_STRATEGY=timescaledb

    volumes:
      # Hot-reload: mount source code
      - ../../backend/api/workspace/src:/app/src:ro
      - ../../backend/api/workspace/scripts:/app/scripts:ro

      # Anonymous volume prevents overwrite
      - /app/node_modules

    networks:
      - tradingsystem_backend

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3200/health', (r) => { process.exit(r.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 40s

    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # ========================================
  # TimescaleDB (Shared Database)
  # ========================================
  # Note: Uses existing TimescaleDB from database stack
  # Must be started separately via:
  #   docker compose -f tools/compose/docker-compose.database.yml up -d timescaledb

# ========================================
# Networks
# ========================================
networks:
  tradingsystem_backend:
    name: tradingsystem_backend
    external: true  # Use existing network from infrastructure stack
