name: Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

jobs:
  deploy-staging:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: staging
    concurrency: staging

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }} --region ${{ vars.AWS_REGION }}

      - name: Deploy to staging
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Update Kubernetes manifests with new image tags
          sed -i "s|image:.*|image: ${ECR_REGISTRY}/${GITHUB_REPOSITORY}/ingestion:${IMAGE_TAG}|" k8s/staging/ingestion.yaml
          sed -i "s|image:.*|image: ${ECR_REGISTRY}/${GITHUB_REPOSITORY}/query:${IMAGE_TAG}|" k8s/staging/query.yaml
          
          # Apply configurations
          kubectl apply -f k8s/staging/namespace.yaml
          kubectl apply -f k8s/staging/configmap.yaml
          kubectl apply -f k8s/staging/secrets.yaml
          kubectl apply -f k8s/staging/qdrant.yaml
          kubectl apply -f k8s/staging/ingestion.yaml
          kubectl apply -f k8s/staging/query.yaml
          
          # Wait for rollout
          kubectl rollout status deployment/llamaindex-ingestion -n llamaindex-staging
          kubectl rollout status deployment/llamaindex-query -n llamaindex-staging

      - name: Run integration tests
        env:
          STAGING_API_URL: ${{ vars.STAGING_API_URL }}
        run: |
          pip install pytest requests
          pytest tests/test_integration.py --staging-url=$STAGING_API_URL

  deploy-production:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    concurrency: production

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }} --region ${{ vars.AWS_REGION }}

      - name: Deploy to production
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.ref_name }}
        run: |
          # Update Kubernetes manifests with new image tags
          sed -i "s|image:.*|image: ${ECR_REGISTRY}/${GITHUB_REPOSITORY}/ingestion:${IMAGE_TAG}|" k8s/production/ingestion.yaml
          sed -i "s|image:.*|image: ${ECR_REGISTRY}/${GITHUB_REPOSITORY}/query:${IMAGE_TAG}|" k8s/production/query.yaml
          
          # Apply configurations
          kubectl apply -f k8s/production/namespace.yaml
          kubectl apply -f k8s/production/configmap.yaml
          kubectl apply -f k8s/production/secrets.yaml
          kubectl apply -f k8s/production/qdrant.yaml
          kubectl apply -f k8s/production/ingestion.yaml
          kubectl apply -f k8s/production/query.yaml
          
          # Wait for rollout
          kubectl rollout status deployment/llamaindex-ingestion -n llamaindex-production
          kubectl rollout status deployment/llamaindex-query -n llamaindex-production

      - name: Verify deployment
        env:
          PROD_API_URL: ${{ vars.PROD_API_URL }}
        run: |
          # Health check
          curl -f ${PROD_API_URL}/health
          
          # Basic smoke test
          response=$(curl -s -w "%{http_code}" ${PROD_API_URL}/metrics)
          if [[ $response != *"200"* ]]; then
            echo "Deployment verification failed"
            exit 1
          fi

  notify:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: |
            *Deployment Status*: ${{ job.status }}
            *Repository*: ${{ github.repository }}
            *Version*: ${{ github.ref_name }}
            *Commit*: ${{ github.sha }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}