openapi: 3.1.0
jsonSchemaDialect: https://json-schema.org/draft/2020-12/schema
info:
  title: TradingSystem Documentation API
  version: 1.0.0
  description: |
    REST API for managing documentation systems, ideas, specifications, search, and file attachments
    within the TradingSystem documentation platform. Supports QuestDB/PostgreSQL dual-strategy
    persistence with comprehensive statistics, health monitoring, and file management capabilities.

    Global rate limiting: Requests are limited via express-rate-limit (see server config). Endpoints may return 429 Too Many Requests and include standard RateLimit headers (RateLimit-Limit, RateLimit-Remaining, RateLimit-Reset). See components.responses.TooManyRequests.
servers:
  - url: http://localhost:3400
    description: Local development
  - url: http://tradingsystem.local/api/documentation
    description: Reverse proxy route
tags:
  - name: Health
  - name: Systems
  - name: Ideas
  - name: Specs
  - name: Search
  - name: Files
  - name: Stats
paths:
  /:
    get:
      tags: [Health]
      summary: Service information
      description: Returns basic information about the Documentation API and available modules.
      responses:
        '200':
          description: Information payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'
              example:
                success: true
                service: documentation-api
                version: '1.0.0'
                endpoints:
                  health: /health
                  documentation: /docs
                  openapi: /spec/openapi.yaml
                  asyncapi: /spec/asyncapi.yaml
                  api:
                    systems: /api/v1/systems
                    ideas: /api/v1/ideas
                    files: /api/v1/files
                    stats: /api/v1/stats
                    search: /api/v1/search
                    suggest: /api/v1/suggest
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /health:
    get:
      tags: [Health]
      summary: Health check
      description: Returns service availability along with QuestDB connectivity.
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
  /metrics:
    get:
      tags: [Health]
      summary: Prometheus metrics
      description: Returns process, HTTP, and QuestDB metrics in Prometheus text format.
      responses:
        '200':
          description: Metrics data
          content:
            text/plain:
              schema:
                type: string
  /api/v1/systems:
    get:
      tags: [Systems]
      summary: List documentation systems
      responses:
        '200':
          description: Array of systems
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemListResponse'
    post:
      tags: [Systems]
      summary: Create documentation system
      parameters:
        - $ref: '#/components/parameters/XUserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSystemRequest'
      responses:
        '201':
          description: System created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
  /api/v1/systems/{id}:
    parameters:
      - $ref: '#/components/parameters/SystemId'
    get:
      tags: [Systems]
      summary: Get system by ID
      responses:
        '200':
          description: System details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Systems]
      summary: Update system
      parameters:
        - $ref: '#/components/parameters/XUserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSystemRequest'
      responses:
        '200':
          description: Updated system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Systems]
      summary: Delete system
      parameters:
        - $ref: '#/components/parameters/XUserId'
      responses:
        '200':
          description: System removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          $ref: '#/components/responses/NotFound'
  /api/v1/systems/{id}/health:
    post:
      tags: [Systems]
      summary: Check specific system health
      description: Performs health check on a specific system
      parameters:
        - $ref: '#/components/parameters/SystemId'
      responses:
        '200':
          description: Health check completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResult'
  /api/v1/systems/health-check-all:
    post:
      tags: [Systems]
      summary: Check all systems health
      description: Performs health checks on all registered systems
      responses:
        '200':
          description: Health checks completed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HealthCheckResult'
  /api/v1/systems/status/{status}:
    get:
      tags: [Systems]
      summary: Get systems by status
      description: Returns systems filtered by their current status
      parameters:
        - name: status
          in: path
          required: true
          schema:
            type: string
            enum: [online, offline, error, unknown]
      responses:
        '200':
          description: Systems retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/System'
  /api/v1/systems/type/{type}:
    get:
      tags: [Systems]
      summary: Get systems by type
      description: Returns systems filtered by their type
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum: [api, webapp, docs, tool]
      responses:
        '200':
          description: Systems retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/System'
  /api/v1/systems/search:
    get:
      tags: [Systems]
      summary: Search systems
      description: Returns systems matching search query
      parameters:
        - $ref: '#/components/parameters/SearchParam'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/System'
  /api/v1/systems/statistics:
    get:
      tags: [Systems]
      summary: Get system statistics
      description: Returns aggregated statistics for systems
      responses:
        '200':
          description: System statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemsStats'
  /api/v1/ideas:
    get:
      tags: [Ideas]
      summary: List documentation ideas
      responses:
        '200':
          description: Array of ideas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdeaListResponse'
    post:
      tags: [Ideas]
      summary: Create idea
      parameters:
        - $ref: '#/components/parameters/XUserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIdeaRequest'
      responses:
        '201':
          description: Idea created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdeaResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
  /api/v1/ideas/{id}:
    parameters:
      - $ref: '#/components/parameters/IdeaId'
    get:
      tags: [Ideas]
      summary: Get idea by ID
      responses:
        '200':
          description: Idea details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdeaResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Ideas]
      summary: Update idea
      parameters:
        - $ref: '#/components/parameters/XUserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIdeaRequest'
      responses:
        '200':
          description: Idea updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdeaResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Ideas]
      summary: Delete idea
      parameters:
        - $ref: '#/components/parameters/XUserId'
      responses:
        '200':
          description: Idea removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          $ref: '#/components/responses/NotFound'
  /api/v1/ideas/kanban:
    get:
      tags: [Ideas]
      summary: Get Kanban board view
      description: Returns ideas grouped by status for Kanban board visualization
      responses:
        '200':
          description: Kanban board data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KanbanResponse'
  /api/v1/docs/status:
    get:
      tags: [Specs]
      summary: Specification validation status
      responses:
        '200':
          description: Validation results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecStatusResponse'
  /api/v1/docs/download:
    get:
      tags: [Specs]
      summary: Download all specs
      description: Returns a ZIP file containing OpenAPI and AsyncAPI specs.
      responses:
        '200':
          description: ZIP archive
          content:
            application/zip:
              schema:
                type: string
                format: binary
  /spec/openapi.yaml:
    get:
      tags: [Specs]
      summary: Download OpenAPI specification
      responses:
        '200':
          description: OpenAPI file
          content:
            application/yaml:
              schema:
                type: string
                format: binary
  /spec/asyncapi.yaml:
    get:
      tags: [Specs]
      summary: Download AsyncAPI specification
      responses:
        '200':
          description: AsyncAPI file
          content:
            application/yaml:
              schema:
                type: string
                format: binary
  /api/v1/search:
    get:
      tags: [Search]
      summary: Search documentation
      parameters:
        - in: query
          name: q
          required: true
          schema:
            type: string
        - in: query
          name: type
          schema:
            type: string
            enum: [endpoint, guide, adr, template, diagram]
        - in: query
          name: source
          schema:
            type: string
            enum: [openapi, asyncapi, markdown, upload]
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
  /api/v1/suggest:
    get:
      tags: [Search]
      summary: Autocomplete suggestions
      parameters:
        - in: query
          name: q
          required: true
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            default: 5
      responses:
        '200':
          description: Suggestion list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestResponse'
  /api/v1/files:
    get:
      tags: [Files]
      summary: List uploaded files
      parameters:
        - in: query
          name: system_id
          schema:
            type: string
            format: uuid
        - in: query
          name: idea_id
          schema:
            type: string
            format: uuid
        - in: query
          name: uploaded_by
          schema:
            type: string
        - in: query
          name: mime_type
          schema:
            type: string
            example: application/pdf
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: is_public
          schema:
            type: boolean
          description: Filter public files
        - in: query
          name: min_size
          schema:
            type: integer
            minimum: 0
        - in: query
          name: max_size
          schema:
            type: integer
            minimum: 0
        - in: query
          name: created_from
          schema:
            type: string
            format: date-time
        - in: query
          name: created_to
          schema:
            type: string
            format: date-time
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
            minimum: 0
        - in: query
          name: order_by
          schema:
            type: string
            enum: [created_at, size, filename, mime_type]
            default: created_at
        - in: query
          name: order_direction
          schema:
            type: string
            enum: [ASC, DESC]
            default: DESC
      responses:
        '200':
          description: File list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileListResponse'
  /api/v1/files/upload:
    post:
      tags: [Files]
      summary: Upload file
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                idea_id:
                  type: string
              required: [file]
      responses:
        '201':
          description: File uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
  /api/v1/files/{fileId}/download:
    parameters:
      - $ref: '#/components/parameters/FileId'
    get:
      tags: [Files]
      summary: Download file
      responses:
        '200':
          description: Binary file stream
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          $ref: '#/components/responses/NotFound'
  /api/v1/files/{fileId}:
    parameters:
      - $ref: '#/components/parameters/FileId'
    put:
      tags: [Files]
      summary: Update file metadata
      parameters:
        - $ref: '#/components/parameters/XUserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  maxLength: 500
                is_public:
                  type: boolean
                system_id:
                  type: string
                  format: uuid
                idea_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Updated file metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Files]
      summary: Delete file
      parameters:
        - $ref: '#/components/parameters/XUserId'
      responses:
        '200':
          description: File deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          $ref: '#/components/responses/NotFound'
  /api/v1/files/upload-multiple:
    post:
      tags: [Files]
      summary: Upload multiple files
      description: Upload multiple files with metadata association
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [files]
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  maxItems: 5
                system_id:
                  type: string
                  format: uuid
                idea_id:
                  type: string
                  format: uuid
                description:
                  type: string
                  maxLength: 500
                is_public:
                  type: boolean
                  default: false
      responses:
        '201':
          description: Files uploaded successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileMetadata'
        '207':
          description: Multi-status - some files succeeded, some failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiStatusResponse'
  /api/v1/files/idea/{ideaId}:
    get:
      tags: [Files]
      summary: Get files by idea
      description: Returns all files associated with a specific idea
      parameters:
        - name: ideaId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Files retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileMetadata'
  /api/v1/files/system/{systemId}:
    get:
      tags: [Files]
      summary: Get files by system
      description: Returns all files associated with a specific system
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Files retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileMetadata'
  /api/v1/files/search:
    get:
      tags: [Files]
      summary: Search files
      description: Returns files matching search query
      parameters:
        - $ref: '#/components/parameters/SearchParam'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileMetadata'
  /api/v1/files/statistics:
    get:
      tags: [Files]
      summary: Get file statistics
      description: Returns file statistics including total count and size
      responses:
        '200':
          description: File statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilesStats'
  /api/v1/files/upload-info:
    get:
      tags: [Files]
      summary: Get upload configuration
      description: Returns upload limits and allowed configurations
      responses:
        '200':
          description: Upload configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadInfoResponse'
  /api/v1/stats/dashboard:
    get:
      tags: [Stats]
      summary: Get dashboard statistics
      description: Returns aggregated dashboard statistics including systems, ideas, and files counts
      parameters:
        - $ref: '#/components/parameters/TimeframeParam'
      responses:
        '200':
          description: Dashboard statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStats'
  /api/v1/stats/systems:
    get:
      tags: [Stats]
      summary: Get systems statistics
      description: Returns statistical breakdown of systems by status and type
      responses:
        '200':
          description: Systems statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemsStats'
  /api/v1/stats/ideas:
    get:
      tags: [Stats]
      summary: Get ideas statistics
      description: Returns statistical breakdown of ideas by status, category, and priority
      responses:
        '200':
          description: Ideas statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdeasStats'
  /api/v1/stats/files:
    get:
      tags: [Stats]
      summary: Get files statistics
      description: Returns file statistics including total size and distribution by MIME type
      responses:
        '200':
          description: Files statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilesStats'
  /api/v1/stats/health:
    get:
      tags: [Stats]
      summary: Get health summary
      description: Returns aggregated health status for all systems
      responses:
        '200':
          description: Health summary retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthSummary'
  /api/v1/stats/analytics:
    get:
      tags: [Stats]
      summary: Get analytics data
      description: Returns time-series analytics data for charts and visualizations
      parameters:
        - $ref: '#/components/parameters/TimeframeParam'
      responses:
        '200':
          description: Analytics data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsData'
  /api/v1/stats/search:
    get:
      tags: [Stats]
      summary: Global search across entities
      description: Search systems, ideas, and files using a single query
      parameters:
        - in: query
          name: q
          required: true
          schema:
            type: string
        - in: query
          name: systems
          schema:
            type: boolean
            default: true
        - in: query
          name: ideas
          schema:
            type: boolean
            default: true
        - in: query
          name: files
          schema:
            type: boolean
            default: true
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsSearchResponse'
  /api/v1/stats/activity:
    get:
      tags: [Stats]
      summary: Get recent activity
      description: Returns recent activity across all entities for specified time period
      parameters:
        - name: days
          in: query
          description: Number of days to look back
          schema:
            type: integer
            minimum: 1
            maximum: 90
            default: 7
      responses:
        '200':
          description: Activity data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityData'
components:
  parameters:
    SystemId:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: System identifier (UUID)
    IdeaId:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Idea identifier (UUID)
    FileId:
      name: fileId
      in: path
      required: true
      schema:
        type: string
    XUserId:
      name: x-user-id
      in: header
      required: false
      description: Optional user identifier used for auditing. Defaults to "anonymous" when absent.
      schema:
        type: string
        example: user-123
    SearchParam:
      name: q
      in: query
      required: true
      description: Search query string
      schema:
        type: string
        minLength: 2
        example: "api documentation"
    TimeframeParam:
      name: timeframe
      in: query
      required: false
      description: Time period for data aggregation
      schema:
        type: string
        enum: ["7d", "30d", "90d", "1y"]
        default: "30d"
        example: "30d"
  responses:
    ValidationError:
      description: Request validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    TooManyRequests:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    InfoResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        service:
          type: string
          example: documentation-api
        version:
          type: string
          example: '1.0.0'
        endpoints:
          type: object
          properties:
            health:
              type: string
              example: /health
            documentation:
              type: string
              example: /docs
            openapi:
              type: string
              example: /spec/openapi.yaml
            asyncapi:
              type: string
              example: /spec/asyncapi.yaml
            api:
              type: object
              properties:
                systems:
                  type: string
                  example: /api/v1/systems
                ideas:
                  type: string
                  example: /api/v1/ideas
                files:
                  type: string
                  example: /api/v1/files
                stats:
                  type: string
                  example: /api/v1/stats
                search:
                  type: string
                  example: /api/v1/search
                suggest:
                  type: string
                  example: /api/v1/suggest
      required: [success, service, version, endpoints]
    HealthResponse:
      type: object
      description: Health status. Database details are reported under "database". The former "questdb" object is deprecated and replaced by "database".
      properties:
        status:
          type: string
          example: ok
        service:
          type: string
          example: documentation-api
        database:
          type: object
          properties:
            engine:
              type: string
              enum: [questdb, postgres, unknown]
              example: questdb
            status:
              type: string
              enum: [healthy, degraded, error, neutral]
              example: healthy
            connections:
              type: integer
              example: 3
        timestamp:
          type: string
          format: date-time
      required: [status, service, database, timestamp]

    StatsSearchResponse:
      type: object
      properties:
        systems:
          type: array
          items:
            $ref: '#/components/schemas/System'
        ideas:
          type: array
          items:
            $ref: '#/components/schemas/Idea'
        files:
          type: array
          items:
            $ref: '#/components/schemas/FileMetadata'
      required: [systems, ideas, files]
      example:
        systems:
          - id: "a1b2c3"
            name: "Service Launcher"
            status: "online"
        ideas:
          - id: "i1"
            title: "Improve rate limiting docs"
            priority: "medium"
        files:
          - id: "f1"
            filename: "architecture.pdf"
            mimetype: "application/pdf"
    System:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        port:
          type: integer
          example: 3500
        status:
          type: string
          enum: [online, degraded, offline, planned]
        category:
          type: string
          description: Optional grouping category
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [id, name, description, status, createdAt]
    CreateSystemRequest:
      type: object
      required: [name, description, status]
      properties:
        name:
          type: string
        description:
          type: string
        port:
          type: integer
        status:
          type: string
          enum: [online, degraded, offline, planned]
        category:
          type: string
        tags:
          type: array
          items:
            type: string
    UpdateSystemRequest:
      allOf:
        - $ref: '#/components/schemas/CreateSystemRequest'
    SystemResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/System'
      required: [success, data]
    SystemListResponse:
      type: object
      properties:
        success:
          type: boolean
        count:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/System'
      required: [success, count, data]
    Idea:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        category:
          type: string
          enum: [api, docs, dashboard, automation, infrastructure]
        priority:
          type: string
          enum: [low, medium, high, critical]
        status:
          type: string
          enum: [new, triage, in_progress, review, completed, rejected]
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [id, title, description, priority, status, createdAt]
    CreateIdeaRequest:
      type: object
      required: [title, description, category, priority]
      properties:
        title:
          type: string
        description:
          type: string
        category:
          type: string
          enum: [api, docs, dashboard, automation, infrastructure]
        priority:
          type: string
          enum: [low, medium, high, critical]
        tags:
          type: array
          items:
            type: string
    UpdateIdeaRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        category:
          type: string
          enum: [api, docs, dashboard, automation, infrastructure]
        priority:
          type: string
          enum: [low, medium, high, critical]
        status:
          type: string
          enum: [new, triage, in_progress, review, completed, rejected]
        tags:
          type: array
          items:
            type: string
    IdeaResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/Idea'
      required: [success, data]
    IdeaListResponse:
      type: object
      properties:
        success:
          type: boolean
        count:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/Idea'
      required: [success, count, data]
    SpecStatusResponse:
      type: object
      properties:
        success:
          type: boolean
        specs:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
                enum: [openapi, asyncapi]
              status:
                type: string
                enum: [valid, invalid]
              lastValidatedAt:
                type: string
                format: date-time
              issues:
                type: array
                items:
                  type: string
      required: [success, specs]
    SearchResult:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        snippet:
          type: string
        type:
          type: string
        source:
          type: string
        score:
          type: number
        link:
          type: string
      required: [id, title, type, source, score, link]
    SearchResponse:
      type: object
      properties:
        success:
          type: boolean
        count:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
      required: [success, count, data]
    SuggestResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: array
          items:
            type: string
      required: [success, data]
    FileMetadata:
      type: object
      properties:
        id:
          type: string
          format: uuid
        filename:
          type: string
        mimetype:
          type: string
        size:
          type: integer
        ideaId:
          type: string
          format: uuid
        uploadedBy:
          type: string
        createdAt:
          type: string
          format: date-time
      required: [id, filename, mimetype, size, createdAt]
    FileResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/FileMetadata'
      required: [success, data]
    FileListResponse:
      type: object
      properties:
        success:
          type: boolean
        count:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/FileMetadata'
      required: [success, count, data]
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
        errors:
          type: array
          items:
            type: string
      required: [success, message]
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"
      required: [success, message]
    HealthCheckResult:
      type: object
      properties:
        systemId:
          type: string
          format: uuid
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        status:
          type: string
          enum: [online, offline, error, unknown]
          example: "online"
        lastChecked:
          type: string
          format: date-time
        responseTime:
          type: number
          example: 150
        error:
          type: string
          example: "Connection timeout"
      required: [systemId, status, lastChecked]
    SystemsStats:
      type: object
      properties:
        total:
          type: integer
          example: 15
        byStatus:
          type: object
          properties:
            online:
              type: integer
              example: 12
            offline:
              type: integer
              example: 2
            error:
              type: integer
              example: 1
        byType:
          type: object
          properties:
            api:
              type: integer
              example: 8
            webapp:
              type: integer
              example: 4
            docs:
              type: integer
              example: 2
            tool:
              type: integer
              example: 1
      required: [total, byStatus, byType]
    IdeasStats:
      type: object
      properties:
        total:
          type: integer
          example: 45
        byStatus:
          type: object
          properties:
            new:
              type: integer
              example: 10
            triage:
              type: integer
              example: 8
            in_progress:
              type: integer
              example: 15
            review:
              type: integer
              example: 7
            completed:
              type: integer
              example: 4
            rejected:
              type: integer
              example: 1
        byPriority:
          type: object
          properties:
            low:
              type: integer
              example: 12
            medium:
              type: integer
              example: 18
            high:
              type: integer
              example: 10
            critical:
              type: integer
              example: 5
        byCategory:
          type: object
          properties:
            api:
              type: integer
              example: 20
            docs:
              type: integer
              example: 15
            dashboard:
              type: integer
              example: 8
            automation:
              type: integer
              example: 2
      required: [total, byStatus, byPriority, byCategory]
    FilesStats:
      type: object
      properties:
        total:
          type: integer
          example: 125
        totalSize:
          type: integer
          example: 52428800
        byMimeType:
          type: object
          properties:
            "application/pdf":
              type: integer
              example: 45
            "image/png":
              type: integer
              example: 30
            "text/plain":
              type: integer
              example: 25
            "application/json":
              type: integer
              example: 15
            "application/zip":
              type: integer
              example: 10
      required: [total, totalSize, byMimeType]
    DashboardStats:
      type: object
      properties:
        systems:
          type: object
          properties:
            total:
              type: integer
              example: 15
            online:
              type: integer
              example: 12
            offline:
              type: integer
              example: 3
        ideas:
          type: object
          properties:
            total:
              type: integer
              example: 45
            active:
              type: integer
              example: 33
            completed:
              type: integer
              example: 12
        files:
          type: object
          properties:
            total:
              type: integer
              example: 125
            totalSize:
              type: integer
              example: 52428800
        lastUpdated:
          type: string
          format: date-time
      required: [systems, ideas, files, lastUpdated]
    HealthSummary:
      type: object
      properties:
        overall:
          type: string
          enum: [healthy, degraded, critical]
          example: "healthy"
        systems:
          type: object
          properties:
            total:
              type: integer
              example: 15
            healthy:
              type: integer
              example: 12
            degraded:
              type: integer
              example: 2
            critical:
              type: integer
              example: 1
        lastChecked:
          type: string
          format: date-time
      required: [overall, systems, lastChecked]
    AnalyticsData:
      type: object
      properties:
        timeframe:
          type: string
          example: "30d"
        systems:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              count:
                type: integer
        ideas:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              count:
                type: integer
        files:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              count:
                type: integer
      required: [timeframe, systems, ideas, files]
    ActivityData:
      type: object
      properties:
        timeframe:
          type: string
          example: "7d"
        activities:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              type:
                type: string
                enum: [system_created, idea_created, file_uploaded, system_updated, idea_updated]
              entity:
                type: string
              description:
                type: string
              timestamp:
                type: string
                format: date-time
              user:
                type: string
      required: [timeframe, activities]
    UploadInfoResponse:
      type: object
      properties:
        max_file_size:
          type: integer
          example: 52428800
        allowed_extensions:
          type: array
          items:
            type: string
          example: [".pdf", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".txt", ".md", ".markdown", ".jpg", ".jpeg", ".png", ".gif", ".svg", ".webp", ".json", ".xml", ".csv", ".yaml", ".yml", ".zip", ".rar"]
        max_files_per_request:
          type: integer
          example: 5
      required: [max_file_size, allowed_extensions, max_files_per_request]
    KanbanResponse:
      type: object
      properties:
        new:
          type: array
          items:
            $ref: '#/components/schemas/Idea'
        triage:
          type: array
          items:
            $ref: '#/components/schemas/Idea'
        in_progress:
          type: array
          items:
            $ref: '#/components/schemas/Idea'
        review:
          type: array
          items:
            $ref: '#/components/schemas/Idea'
        completed:
          type: array
          items:
            $ref: '#/components/schemas/Idea'
        rejected:
          type: array
          items:
            $ref: '#/components/schemas/Idea'
      required: [new, triage, in_progress, review, completed, rejected]
      example:
        new:
          - id: "idea-1"
            title: "New feature request"
            status: "new"
        triage:
          - id: "idea-2"
            title: "Bug fix needed"
            status: "triage"
        in_progress: []
        review: []
        completed: []
        rejected: []
    MultiStatusResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/FileMetadata'
        errors:
          type: array
          items:
            type: object
            properties:
              filename:
                type: string
                example: "document.pdf"
              error:
                type: string
                example: "File size exceeds limit"
      required: [success, data, errors]
