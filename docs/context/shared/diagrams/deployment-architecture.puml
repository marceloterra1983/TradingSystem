@startuml Deployment Architecture - Windows Native
!theme plain
title TradingSystem - Deployment Architecture (Native Windows)

!define WINDOWS_COLOR #0078D4
!define DOCKER_COLOR #2496ED
!define SERVICE_COLOR #E5F5FF
!define DATA_COLOR #FFE5E5

node "Windows Trading Server" as Server WINDOWS_COLOR {

  package "Core Trading Services\n(Native Windows Services)" as CoreServices SERVICE_COLOR {
    component [DataCapture Service\n.NET 8.0 x64] as DataCapture
    component [Order Manager Service\n.NET 8.0 x64] as OrderManager
    component [API Gateway\nFastAPI] as Gateway

    note right of DataCapture
      **Windows Service**
      - Service Name: TradingSystem-DataCapture
      - Port: 5050
      - Dependencies: ProfitDLL.dll
      - Auto-start: Yes
      - Recovery: Restart on failure
    end note

    note right of OrderManager
      **Windows Service**
      - Service Name: TradingSystem-OrderManager
      - Port: 5055
      - Dependencies: ProfitDLL.dll
      - Auto-start: Yes
      - Recovery: Restart on failure
    end note

  }

  package "Auxiliary Services\n(Docker Allowed)" as AuxServices DOCKER_COLOR {
    component [Idea Bank API\nNode.js + Express] as IdeaBankAPI
    component [Documentation API\nNode.js + Express] as DocsAPI
    component [Prometheus\nMetrics Collector] as Prometheus
    component [Grafana\nDashboards] as Grafana

    note right of IdeaBankAPI
      **Docker Container (optional)**
      - Image: node:18-alpine
      - Port: 3200
      - Volume: ./data/idea-bank
      - Can also run natively
    end note

    note right of Prometheus
      **Docker Container**
      - Image: prom/prometheus
      - Port: 9090
      - Volume: ./config/prometheus
      - Scrapes: Core services
    end note
  }

  package "Frontend\n(Static Files)" as Frontend SERVICE_COLOR {
    component [React Dashboard\nBuild Output] as Dashboard
    component [IIS / nginx\nWeb Server] as WebServer

    note right of Dashboard
      **Static Build**
      - Built with: npm run build
      - Output: frontend/apps/dashboard/dist
      - Served by: IIS or nginx
      - Port: 80/443 (HTTPS)
    end note
  }

  package "Native Windows DLLs" as NativeDLLs WINDOWS_COLOR {
    component [ProfitDLL.dll\n64-bit] as ProfitDLL

    note right of ProfitDLL
      **Windows Native DLL**
      - Location: C:\ProfitDLL\Win64\
      - Architecture: x64 only
      - Callbacks: StdCall convention
      - CRITICAL: Cannot run in Docker
      - Reason: Native COM interop + kernel hooks
    end note
  }

  database "Data Storage" as Storage DATA_COLOR {
    folder "Parquet Files\n(Time-series)" as Parquet
    folder "LowDB JSON\n(MVP Storage)" as LowDB
    folder "Logs\n(JSONL)" as Logs
    folder "ML Models\n(Pickle)" as Models

    note right of Parquet
      **Path:** C:\TradingSystem\data\parquet\
      **Structure:**
      - {asset}/{date}/trades.parquet
      - {asset}/{date}/book.parquet
      **Retention:** 90 days
    end note

    note right of LowDB
      **Path:** C:\TradingSystem\data\lowdb\
      **Files:**
      - idea-bank/db.json
      - documentation/registry.json
      **Migration:** Q1 2026 â†’ PostgreSQL
    end note
  }

  cloud "External Systems" as External {
    component [Nelogica Broker\nProfit Platform] as Broker

    note right of Broker
      **Connection:**
      - Protocol: ProfitDLL proprietary
      - Ports: Dynamic (assigned by DLL)
      - Authentication: User + Password + Key
      - HCS Mode: High-speed mode available
    end note
  }
}

' Relationships - Core Services
DataCapture --> ProfitDLL : "P/Invoke (x64)"
OrderManager --> ProfitDLL : "P/Invoke (x64)"
DataCapture --> Gateway : "WebSocket\nStreaming"
Gateway --> OrderManager : "HTTP REST\nhttp://localhost:5055"
OrderManager --> DataCapture : "HTTP REST\nhttp://localhost:5050"

' Relationships - Auxiliary Services
Gateway --> IdeaBankAPI : "HTTP REST\nhttp://localhost:3200"
Gateway --> DocsAPI : "HTTP REST\nhttp://localhost:3300"
Prometheus --> DataCapture : "Scrape /metrics"
Prometheus --> OrderManager : "Scrape /metrics"
Grafana --> Prometheus : "Query metrics"

' Relationships - Frontend
Dashboard --> WebServer : "Served by"
WebServer --> Gateway : "HTTP REST\nhttp://localhost:8000"

' Relationships - Data Storage
DataCapture --> Parquet : "Write trades\n(PyArrow)"
DataCapture --> Logs : "Write logs\n(Serilog)"
OrderManager --> Logs : "Write logs\n(Serilog)"
IdeaBankAPI --> LowDB : "Read/Write ideas"
DocsAPI --> LowDB : "Read/Write docs"

' Relationships - External
ProfitDLL --> Broker : "Proprietary protocol\n(Windows native)"

' Deployment Notes
note top of Server
  **Hardware Requirements:**
  - CPU: Intel/AMD x64, 8+ cores
  - RAM: 16GB minimum, 32GB recommended
  - Disk: NVMe SSD (low latency required)
  - OS: Windows 10/11 or Server 2019/2022
  - Network: 1 Gbps, <10ms latency to broker

  **Why Windows Native for Core:**
  1. ProfitDLL is Windows-only 64-bit DLL
  2. Latency requirement <500ms P95
  3. Direct NVMe I/O for Parquet (30% faster)
  4. 100% CPU/RAM allocation to trading
  5. Production stability (24/7 operation)
end note

note bottom of Server
  **Deployment Process:**
  1. Install .NET 8.0 x64 Runtime
  2. Install Python 3.11 (native Windows)
  3. Copy ProfitDLL.dll to C:\ProfitDLL\Win64\
  4. Install core services as Windows Services:
     - sc.exe create TradingSystem-DataCapture
     - sc.exe create TradingSystem-OrderManager
  5. (Optional) Start auxiliary services in Docker
  6. Build frontend: npm run build
  7. Deploy to IIS/nginx

  **Service Management:**
  - Start: .\infrastructure\scripts\start-all-services.ps1
  - Stop: .\infrastructure\scripts\stop-all-services.ps1
  - Status: Get-Service TradingSystem-*
end note

@enduml
