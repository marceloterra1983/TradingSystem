@startuml TradingSystem Architecture
!theme plain
title TradingSystem - High-Level Architecture
skinparam componentStyle rectangle

' Define colors
!define CORE_COLOR #FFE5E5
!define BACKEND_COLOR #E5F5FF
!define FRONTEND_COLOR #E5FFE5
!define INFRA_COLOR #FFF5E5
!define DATA_COLOR #F5E5FF

' Core Trading Services (Native Windows - NO DOCKER)
package "Core Trading Services\n(Native Windows - NO DOCKER)" as CoreServices CORE_COLOR {
    component [Data Capture\n.NET 8 + ProfitDLL] as DataCapture
    component [Order Manager\n.NET 8 + Risk Engine] as OrderManager

    note right of DataCapture
        **ProfitDLL Integration**
        - 64-bit Windows native
        - Real-time market data
        - Order book streaming
        - < 500ms latency
    end note
}

' Backend Services (Docker Allowed)
package "Backend Services\n(Docker Allowed for Auxiliary)" as BackendServices BACKEND_COLOR {
    component [API Gateway\nFastAPI] as Gateway
    component [Idea Bank API\nNode.js + Express] as IdeaBank
    component [Documentation API\nNode.js + Express] as DocsAPI
    component [Telegram Collector\nNode.js] as TelegramAPI
}

' Frontend Applications
package "Frontend Applications" as Frontend FRONTEND_COLOR {
    component [Dashboard\nReact 18 + TypeScript] as Dashboard
    component [Docusaurus\nDocumentation Site] as Docusaurus
}

' Infrastructure (Docker Allowed)
package "Infrastructure & Monitoring" as Infrastructure INFRA_COLOR {
    component [Prometheus\nMetrics Collection] as Prometheus
    component [Grafana\nDashboards] as Grafana
}

' Data Storage
package "Data Layer" as DataLayer DATA_COLOR {
    database "LowDB\n(JSON Files)" as LowDB
    database "Parquet Files\n(Market Data)" as Parquet
    database "PostgreSQL\n(Future)" as PostgreSQL
}

' External Systems
cloud "External Systems" {
    component [Nelogica\nProfitDLL] as ProfitDLL
    component [Telegram\nAPI] as Telegram
}

' Connections - Core Trading Flow
ProfitDLL -down-> DataCapture : "Market Data\nCallbacks"
DataCapture -right-> Gateway : "WebSocket\nJSON Stream"
Gateway -down-> OrderManager : "Execution\nCommands"
OrderManager -up-> ProfitDLL : "Order\nExecution"



' Gateway to APIs
Gateway <--> IdeaBank : "HTTP/REST"
Gateway <--> DocsAPI : "HTTP/REST"
Gateway <--> TelegramAPI : "HTTP/REST"

' APIs to Storage
IdeaBank -down-> LowDB : "Read/Write"
DocsAPI -down-> LowDB : "Read/Write"
IdeaBank ..> PostgreSQL : "Future\nMigration"

' Frontend Connections
Dashboard -up-> Gateway : "HTTP/REST\nWebSocket"
Dashboard -up-> IdeaBank : "HTTP/REST"
Dashboard -up-> DocsAPI : "HTTP/REST"
Dashboard -up-> TelegramAPI : "HTTP/REST"

' Telegram Integration
TelegramAPI -up-> Telegram : "Bot API\nPolling/Webhook"

' Monitoring
DataCapture --> Prometheus : "Metrics"
OrderManager --> Prometheus : "Metrics"
Gateway --> Prometheus : "Metrics"
IdeaBank --> Prometheus : "Metrics"
Prometheus --> Grafana : "Queries"

' Notes
note right of PostgreSQL
    **Migration Planned**
    Q1 2026
    - LowDB â†’ PostgreSQL
    - Enhanced security
    - Multi-user support
end note

note bottom of CoreServices
    **Critical Requirement**
    Core trading services MUST run
    natively on Windows due to:
    - ProfitDLL (Windows-only DLL)
    - Latency < 500ms requirement
    - Direct NVMe/SSD access
end note

note bottom of BackendServices
    **Docker Allowed**
    Auxiliary services CAN use
    Docker for deployment:
    - Easier scaling
    - Environment isolation
    - Development consistency
end note

@enduml
