@startuml TradingSystem Architecture

!define RECTANGLE_COLOR #E1F5FE
!define SERVICE_COLOR #B3E5FC
!define STORAGE_COLOR #FFE0B2
!define EXTERNAL_COLOR #F8BBD0

title Trading System - Architecture Overview

' External Systems
package "External" <<Cloud>> #EXTERNAL_COLOR {
    [ProfitDLL] as ProfitDLL <<Library>>
    note right of ProfitDLL
        Nelogica Market Data
        - Real-time ticks
        - Order book
        - Order execution
    end note
}

' Data Capture Service
package "DataCapture Service" <<C#>> #SERVICE_COLOR {
    [ProfitDLL Wrapper] as Wrapper
    [State Monitor] as StateMonitor
    [WebSocket Publisher] as WSPublisher
    [Callback Handlers] as Callbacks

    Callbacks -down-> StateMonitor : connection state
    StateMonitor -down-> Wrapper : reconnect
    Wrapper -right-> WSPublisher : trade data
}

' Analytics Pipeline
package "Analytics Pipeline" <<Python>> #SERVICE_COLOR {
    [WebSocket Consumer] as WSConsumer
    [Feature Engineering] as Features
    [ML Model (SGD)] as MLModel
    [Signal Generator] as SignalGen

    WSConsumer -down-> Features : raw trades
    Features -down-> MLModel : feature vectors
    MLModel -down-> SignalGen : predictions
}

' API Gateway
package "API Gateway" <<FastAPI>> #SERVICE_COLOR {
    [Signal Endpoint] as SignalAPI
    [Position Endpoint] as PositionAPI
    [Metrics Endpoint] as MetricsAPI
    [Risk Endpoint] as RiskAPI

    SignalAPI -down-> PositionAPI
    PositionAPI -down-> MetricsAPI
    MetricsAPI -down-> RiskAPI
}

' Order Manager
package "Order Manager" <<C#>> #SERVICE_COLOR {
    [Risk Engine] as RiskEngine
    [Order Executor] as OrderExec
    [Position Tracker] as PosTracker

    RiskEngine -down-> OrderExec : validated orders
    OrderExec -down-> PosTracker : executions
}

' Dashboard
package "Dashboard" <<React>> #SERVICE_COLOR {
    [Signal View] as SignalView
    [Position View] as PosView
    [Metrics View] as MetricsView
    [Kill Switch] as KillSwitch

    SignalView -down-> PosView
    PosView -down-> MetricsView
    MetricsView -down-> KillSwitch
}

' Storage
package "Data Storage" <<Local>> #STORAGE_COLOR {
    database "Parquet Files" as Parquet {
        [Tick Data]
        [Processed Features]
        [Signals]
        [Executions]
    }

    database "JSONL Logs" as Logs {
        [State Logs]
        [Trade Logs]
        [Error Logs]
        [Audit Logs]
    }

    database "ML Models" as Models {
        [Trained Models]
        [Model Versions]
        [Metrics]
    }
}

' Monitoring
package "Observability" <<Monitoring>> #SERVICE_COLOR {
    [Prometheus] as Prom
    [Grafana] as Graf

    Prom -down-> Graf : metrics
}

' Data Flow
ProfitDLL -down-> Wrapper : callbacks
WSPublisher ..> WSConsumer : WebSocket\n(port 9001)
SignalGen ..> SignalAPI : HTTP POST\n/api/v1/signals
SignalAPI ..> RiskEngine : HTTP POST\n/execute
OrderExec ..> ProfitDLL : send orders
ProfitDLL ..> Callbacks : execution callbacks

' Dashboard connections
SignalAPI <..> SignalView : REST API
PositionAPI <..> PosView : REST API
MetricsAPI <..> MetricsView : REST API
RiskAPI <..> KillSwitch : REST API

' Storage connections
WSPublisher ..> Parquet : write trades
Features ..> Parquet : write features
SignalGen ..> Parquet : write signals
MLModel ..> Models : save/load
StateMonitor ..> Logs : write logs
RiskEngine ..> Logs : audit logs

' Monitoring connections
WSPublisher ..> Prom : metrics
SignalGen ..> Prom : metrics
RiskEngine ..> Prom : metrics

legend right
    |= Symbol |= Description |
    | <<C#>> | .NET 8.0 Service |
    | <<Python>> | Python 3.11+ Service |
    | <<React>> | React 18 Frontend |
    | ..> | Async Communication |
    | -> | Sync Communication |
endlegend

@enduml
