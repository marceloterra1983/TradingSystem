openapi: 3.1.0
info:
  title: TradingSystem API
  description: |
    TradingSystem REST API for market data, signal ingestion, and documentation management.
    
    This API provides endpoints for:
    - B3 (real-time market data, indicators, volatility surface)
    - TP-Capital (Telegram signal ingestion and management)
    - Documentation API (systems, ideas, files, statistics)
    - Laucher (service orchestration and health)
    
    ## Base URLs
    - B3: http://localhost:3302
    - TP-Capital: http://localhost:3200  
    - Documentation API: http://localhost:3400
    - Laucher: http://localhost:3500
    - Dashboard: http://localhost:3101
  version: 1.0.0
  contact:
    name: TradingSystem Team
    email: support@tradingsystem.local
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3302
    description: B3 API
  - url: http://localhost:3200
    description: TP-Capital API
  - url: http://localhost:3400
    description: Documentation API
  - url: http://localhost:3500
    description: Laucher API

tags:
  - name: Health
    description: Health check endpoints
  - name: Market Data
    description: B3 market data endpoints
  - name: Signals
    description: TP Capital signal management
  - name: Telegram
    description: Telegram bots and channels management
  - name: Documentation
    description: Documentation management
  - name: Systems
    description: System configuration and monitoring

paths:
  # ========================================
  # COMMON HEALTH ENDPOINTS
  # ========================================
  /health:
    get:
      tags: [Health]
      summary: Get service health status
      description: Returns the health status of the service and its dependencies
      operationId: getHealth
      parameters:
        - name: detailed
          in: query
          description: Return detailed health information
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              examples:
                basic:
                  summary: Basic health check
                  value:
                    status: ok
                    questdb: true
                detailed:
                  summary: Detailed health check
                  value:
                    status: ok
                    questdb: true
                    tables:
                      snapshots: { ok: true, count: 1500000 }
                      indicators: { ok: true, count: 500000 }
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: error
                questdb: false
                database: disconnected

  /metrics:
    get:
      tags: [Health]
      summary: Get Prometheus metrics
      description: Returns metrics in Prometheus format
      operationId: getMetrics
      responses:
        '200':
          description: Metrics in Prometheus format
          content:
            text/plain:
              schema:
                type: string
              example: |
                # HELP questdb_query_duration_seconds Duration of QuestDB queries in seconds
                # TYPE questdb_query_duration_seconds histogram
                questdb_query_duration_seconds_bucket{endpoint="/overview",status="success",le="0.01"} 5
                questdb_query_duration_seconds_bucket{endpoint="/overview",status="success",le="0.05"} 15

  # ========================================
  # B3 MARKET DATA ENDPOINTS (PORT 3302)
  # ========================================
  /:
    get:
      tags: [Market Data]
      summary: Get API information
      description: Returns basic information about the B3 API
      operationId: getMarketDataInfo
      responses:
        '200':
          description: API information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiInfo'
              example:
                status: ok
                endpoints: ['/health', '/overview', '/adjustments', '/vol-surface', '/indicators/daily', '/gamma-levels', '/dxy']
                message: B3 API

  /overview:
    get:
      tags: [Market Data]
      summary: Get market overview
      description: Returns consolidated market data including snapshots, indicators, gamma levels, and DXY
      operationId: getMarketOverview
      responses:
        '200':
          description: Market overview data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketOverview'
        '500':
          $ref: '#/components/responses/ServerError'

  /adjustments:
    get:
      tags: [Market Data]
      summary: Get market adjustments
      description: Returns market adjustment data with filtering options
      operationId: getAdjustments
      parameters:
        - name: limit
          in: query
          description: Maximum number of records to return
          schema:
            type: integer
            default: 120
            minimum: 1
            maximum: 1000
        - name: instrument
          in: query
          description: Filter by instrument symbol
          schema:
            type: string
            example: "WIN"
        - name: contract
          in: query
          description: Filter by contract
          schema:
            type: string
        - name: from
          in: query
          description: Start date (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: End date (ISO 8601)
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Adjustment data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdjustmentResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /vol-surface:
    get:
      tags: [Market Data]
      summary: Get volatility surface
      description: Returns volatility surface data for options
      operationId: getVolSurface
      parameters:
        - name: contract
          in: query
          description: Contract month
          schema:
            type: string
      responses:
        '200':
          description: Volatility surface data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolSurfaceResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /indicators/daily:
    get:
      tags: [Market Data]
      summary: Get daily indicators
      description: Returns daily market indicators
      operationId: getDailyIndicators
      parameters:
        - name: limit
          in: query
          description: Maximum number of records to return
          schema:
            type: integer
            default: 180
            minimum: 1
            maximum: 1000
      responses:
        '200':
          description: Daily indicators data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyIndicatorsResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /gamma-levels:
    get:
      tags: [Market Data]
      summary: Get gamma levels
      description: Returns latest gamma exposure levels
      operationId: getGammaLevels
      responses:
        '200':
          description: Gamma levels data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GammaLevelsResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /dxy:
    get:
      tags: [Market Data]
      summary: Get DXY data
      description: Returns latest US Dollar Index data
      operationId: getDxyData
      responses:
        '200':
          description: DXY data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DxyResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  # ========================================
  # TP CAPITAL SIGNALS ENDPOINTS (PORT 3200)
  # ========================================
  /signals:
    get:
      tags: [Signals]
      summary: Get trading signals
      description: Returns trading signals with filtering options
      operationId: getSignals
      parameters:
        - name: limit
          in: query
          description: Maximum number of signals to return
          schema:
            type: integer
            minimum: 1
            maximum: 1000
        - name: channel
          in: query
          description: Filter by channel name
          schema:
            type: string
        - name: type
          in: query
          description: Filter by signal type
          schema:
            type: string
            enum: [buy, sell, hold, alert]
        - name: search
          in: query
          description: Search term (searches in asset and raw message)
          schema:
            type: string
        - name: from
          in: query
          description: Start timestamp
          schema:
            type: string
        - name: to
          in: query
          description: End timestamp
          schema:
            type: string
      responses:
        '200':
          description: Signals data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignalsResponse'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags: [Signals]
      summary: Delete signal
      description: Deletes a signal by ingestion timestamp
      operationId: deleteSignal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ingestedAt]
              properties:
                ingestedAt:
                  type: string
                  description: Ingestion timestamp of the signal to delete
      responses:
        '200':
          description: Signal deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /logs:
    get:
      tags: [Signals]
      summary: Get service logs
      description: Returns service logs with filtering options
      operationId: getLogs
      parameters:
        - name: limit
          in: query
          description: Maximum number of log entries to return
          schema:
            type: integer
            minimum: 1
            maximum: 1000
        - name: level
          in: query
          description: Filter by log level
          schema:
            type: string
            enum: [debug, info, warn, error]
      responses:
        '200':
          description: Logs data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /bots:
    get:
      tags: [Telegram]
      summary: Get bot information
      description: Returns configured Telegram bot information
      operationId: getBotInfo
      responses:
        '200':
          description: Bot information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotInfoResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /channels:
    get:
      tags: [Telegram]
      summary: Get channel statistics
      description: Returns channel statistics from QuestDB
      operationId: getChannelStats
      responses:
        '200':
          description: Channel statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelStatsResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /config/channels:
    get:
      tags: [Telegram]
      summary: Get configured channels
      description: Returns configured source and destination channels
      operationId: getConfiguredChannels
      responses:
        '200':
          description: Configured channels
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfiguredChannelsResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  # ========================================
  # TELEGRAM BOTS CRUD
  # ========================================
  /telegram/bots:
    get:
      tags: [Telegram]
      summary: Get all Telegram bots
      description: Returns all configured Telegram bots
      operationId: getTelegramBots
      responses:
        '200':
          description: Telegram bots list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelegramBotsResponse'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      tags: [Telegram]
      summary: Create Telegram bot
      description: Creates a new Telegram bot configuration
      operationId: createTelegramBot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTelegramBotRequest'
      responses:
        '200':
          description: Bot created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResourceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /telegram/bots/{id}:
    put:
      tags: [Telegram]
      summary: Update Telegram bot
      description: Updates an existing Telegram bot configuration
      operationId: updateTelegramBot
      parameters:
        - name: id
          in: path
          required: true
          description: Bot ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTelegramBotRequest'
      responses:
        '200':
          description: Bot updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags: [Telegram]
      summary: Delete Telegram bot
      description: Soft deletes a Telegram bot configuration
      operationId: deleteTelegramBot
      parameters:
        - name: id
          in: path
          required: true
          description: Bot ID
          schema:
            type: string
      responses:
        '200':
          description: Bot deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  # ========================================
  # TELEGRAM CHANNELS CRUD
  # ========================================
  /telegram/channels:
    get:
      tags: [Telegram]
      summary: Get all Telegram channels
      description: Returns all configured Telegram channels
      operationId: getTelegramChannels
      responses:
        '200':
          description: Telegram channels list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelegramChannelsResponse'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      tags: [Telegram]
      summary: Create Telegram channel
      description: Creates a new Telegram channel configuration
      operationId: createTelegramChannel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTelegramChannelRequest'
      responses:
        '200':
          description: Channel created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResourceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /telegram/channels/{id}:
    put:
      tags: [Telegram]
      summary: Update Telegram channel
      description: Updates an existing Telegram channel configuration
      operationId: updateTelegramChannel
      parameters:
        - name: id
          in: path
          required: true
          description: Channel ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTelegramChannelRequest'
      responses:
        '200':
          description: Channel updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags: [Telegram]
      summary: Delete Telegram channel
      description: Soft deletes a Telegram channel configuration
      operationId: deleteTelegramChannel
      parameters:
        - name: id
          in: path
          required: true
          description: Channel ID
          schema:
            type: string
      responses:
        '200':
          description: Channel deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  # ========================================
  # DOCUMENTATION API ENDPOINTS (PORT 3400)

  # ========================================
  # VERSION MANAGEMENT
  # ========================================
  /api/v1/versions:
    get:
      tags: [Documentation]
      summary: List documentation versions
      description: |
        Returns a list of all available documentation versions.
      operationId: listVersions
      responses:
        '200':
          description: List of versions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionsResponse'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      tags: [Documentation]
      summary: Create new version
      description: |
        Creates a new documentation version.
      operationId: createVersion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVersionRequest'
      responses:
        '201':
          description: Version created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/versions/{version}:
    get:
      tags: [Documentation]
      summary: Get specific version
      description: |
        Returns details about a specific documentation version.
        Use 'latest' or 'stable' for those respective versions.
      operationId: getVersion
      parameters:
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Version details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/versions/compare/{v1}/{v2}:
    get:
      tags: [Documentation]
      summary: Compare versions
      description: Compare changes between two documentation versions
      operationId: compareVersions
      parameters:
        - name: v1
          in: path
          required: true
          schema:
            type: string
        - name: v2
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Version comparison
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionComparisonResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  # ========================================
  /api/v1/systems:
    get:
      tags: [Documentation, Systems]
      summary: Get documentation systems
      description: Returns all configured documentation systems
      operationId: getDocumentationSystems
      responses:
        '200':
          description: Documentation systems list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationSystemsResponse'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      tags: [Documentation, Systems]
      summary: Create documentation system
      description: Creates a new documentation system configuration
      operationId: createDocumentationSystem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentationSystemRequest'
      responses:
        '201':
          description: System created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResourceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/ideas:
    get:
      tags: [Documentation]
      summary: Get ideas
      description: Returns trading ideas and suggestions
      operationId: getIdeas
      parameters:
        - name: limit
          in: query
          description: Maximum number of ideas to return
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 1000
        - name: status
          in: query
          description: Filter by status
          schema:
            type: string
            enum: [open, in_progress, completed, archived]
        - name: category
          in: query
          description: Filter by category
          schema:
            type: string
      responses:
        '200':
          description: Ideas list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdeasResponse'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      tags: [Documentation]
      summary: Create idea
      description: Creates a new trading idea or suggestion
      operationId: createIdea
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIdeaRequest'
      responses:
        '201':
          description: Idea created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResourceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/files:
    get:
      tags: [Documentation]
      summary: Get files
      description: Returns documentation files list
      operationId: getFiles
      parameters:
        - name: path
          in: query
          description: Filter by path
          schema:
            type: string
        - name: type
          in: query
          description: Filter by file type
          schema:
            type: string
            enum: [md, mdx, yaml, json, other]
      responses:
        '200':
          description: Files list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilesResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/stats:
    get:
      tags: [Documentation, Systems]
      summary: Get documentation statistics
      description: Returns documentation statistics and metrics
      operationId: getDocumentationStats
      responses:
        '200':
          description: Documentation statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationStatsResponse'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    # ========================================
    # COMMON SCHEMAS
    # ========================================
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error, degraded]
        database:
          type: string
          enum: [connected, disconnected, error]
        questdb:
          type: boolean
          description: QuestDB connection status
        timestamp:
          type: string
          format: date-time
        service:
          type: string
          description: Service name
        tables:
          type: object
          description: Table health status (for detailed health checks)
          additionalProperties:
            type: object
            properties:
              ok:
                type: boolean
              count:
                type: integer
                description: Number of records

    ApiInfo:
      type: object
      properties:
        status:
          type: string
          example: ok
        endpoints:
          type: array
          items:
            type: string
        message:
          type: string

    StatusResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        timestamp:
          type: string
          format: date-time

    CreateResourceResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok]
        id:
          type: string
          description: ID of the created resource
        timestamp:
          type: string
          format: date-time

    # ========================================
    # MARKET DATA SCHEMAS
    # ========================================
    MarketOverview:
      type: object
      properties:
        data:
          type: object
          properties:
            snapshots:
              type: array
              items:
                $ref: '#/components/schemas/MarketSnapshot'
            indicators:
              type: array
              items:
                $ref: '#/components/schemas/MarketIndicator'
            gammaLevels:
              type: array
              items:
                $ref: '#/components/schemas/GammaLevel'
            dxy:
              type: array
              items:
                $ref: '#/components/schemas/DxyTick'

    MarketSnapshot:
      type: object
      properties:
        symbol:
          type: string
          description: Asset symbol
          example: "WIN$N"
        price:
          type: number
          format: double
          description: Current price
        volume:
          type: integer
          description: Trade volume
        timestamp:
          type: string
          format: date-time
        exchange:
          type: string
          description: Exchange code
          example: "BVMF"

    MarketIndicator:
      type: object
      properties:
        name:
          type: string
          description: Indicator name
        value:
          type: number
          format: double
          description: Indicator value
        change:
          type: number
          format: double
          description: Change from previous value
        timestamp:
          type: string
          format: date-time

    GammaLevel:
      type: object
      properties:
        strike:
          type: number
          format: double
          description: Strike price
        gamma:
          type: number
          format: double
          description: Gamma exposure
        delta:
          type: number
          format: double
          description: Delta exposure
        timestamp:
          type: string
          format: date-time

    DxyTick:
      type: object
      properties:
        price:
          type: number
          format: double
          description: DXY price
        change:
          type: number
          format: double
          description: Price change
        timestamp:
          type: string
          format: date-time

    AdjustmentResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/MarketAdjustment'

    MarketAdjustment:
      type: object
      properties:
        instrument:
          type: string
          description: Instrument symbol
        contract:
          type: string
          description: Contract identifier
        adjustmentType:
          type: string
          enum: [bonus, split, merger, dividend]
        ratio:
          type: number
          format: double
          description: Adjustment ratio
        effectiveDate:
          type: string
          format: date
        timestamp:
          type: string
          format: date-time

    VolSurfaceResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/VolatilityPoint'

    VolatilityPoint:
      type: object
      properties:
        strike:
          type: number
          format: double
          description: Strike price
        maturity:
          type: string
          format: date
          description: Maturity date
        impliedVol:
          type: number
          format: double
          description: Implied volatility
        bidAskSpread:
          type: number
          format: double
          description: Bid-ask spread
        timestamp:
          type: string
          format: date-time

    DailyIndicatorsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DailyIndicator'

    DailyIndicator:
      type: object
      properties:
        date:
          type: string
          format: date
        indicator:
          type: string
          description: Indicator name
        value:
          type: number
          format: double
        source:
          type: string
          description: Data source

    GammaLevelsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/GammaLevel'

    DxyResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DxyTick'

    # ========================================
    # SIGNALS SCHEMAS
    # ========================================
    SignalsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TradingSignal'

    TradingSignal:
      type: object
      properties:
        id:
          type: string
          description: Signal ID
        asset:
          type: string
          description: Asset symbol
          example: "WINZ25"
        signalType:
          type: string
          enum: [buy, sell, hold, alert]
          description: Signal type
        price:
          type: number
          format: double
          description: Suggested price
        quantity:
          type: integer
          description: Suggested quantity
        channel:
          type: string
          description: Source channel
        rawMessage:
          type: string
          description: Original message content
        confidence:
          type: number
          minimum: 0
          maximum: 1
          description: Signal confidence (0-1)
        ingestedAt:
          type: string
          format: date-time
        timestamp:
          type: string
          format: date-time

    LogsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/LogEntry'

    LogEntry:
      type: object
      properties:
        level:
          type: string
          enum: [debug, info, warn, error]
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        correlationId:
          type: string
          description: Request correlation ID
        service:
          type: string
          description: Service name

    # ========================================
    # TELEGRAM SCHEMAS
    # ========================================
    BotInfoResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/BotInfo'

    BotInfo:
      type: object
      properties:
        configured:
          type: boolean
          description: Whether bot is configured
        mode:
          type: string
          enum: [webhook, polling]
          description: Bot operation mode
        webhook:
          type: object
          properties:
            url:
              type: string
              nullable: true
              description: Webhook URL
            hasSecretToken:
              type: boolean
              description: Whether secret token is configured
        status:
          type: string
          example: running
        timestamp:
          type: string
          format: date-time

    ChannelStatsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ChannelStats'

    ChannelStats:
      type: object
      properties:
        channel:
          type: string
          description: Channel name
        signal_count:
          type: integer
          description: Number of signals from this channel
        last_signal:
          type: string
          format: date-time
          description: Timestamp of last signal
        source:
          type: string
          description: Data source
        timestamp:
          type: string
          format: date-time

    ConfiguredChannelsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ConfiguredChannel'
        timestamp:
          type: string
          format: date-time

    ConfiguredChannel:
      type: object
      properties:
        channelId:
          type: string
          description: Channel ID
        type:
          type: string
          enum: [source, destination]
          description: Channel type

    TelegramBotsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TelegramBot'
        timestamp:
          type: string
          format: date-time

    TelegramBot:
      type: object
      properties:
        id:
          type: string
          description: Bot ID
        username:
          type: string
          description: Bot username
        token:
          type: string
          description: Bot token (masked in responses)
        bot_type:
          type: string
          description: Bot type (Ingestion, Forwarder, etc.)
        description:
          type: string
          description: Bot description
        status:
          type: string
          enum: [active, inactive, error]
          description: Bot status
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateTelegramBotRequest:
      type: object
      required: [username, token]
      properties:
        username:
          type: string
          description: Bot username
        token:
          type: string
          description: Bot token
        bot_type:
          type: string
          default: Sender
          description: Bot type
        description:
          type: string
          description: Bot description

    UpdateTelegramBotRequest:
      type: object
      properties:
        username:
          type: string
          description: Bot username
        token:
          type: string
          description: Bot token
        bot_type:
          type: string
          description: Bot type
        description:
          type: string
          description: Bot description
        status:
          type: string
          enum: [active, inactive, error]
          description: Bot status

    TelegramChannelsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TelegramChannel'
        timestamp:
          type: string
          format: date-time

    TelegramChannel:
      type: object
      properties:
        id:
          type: string
          description: Channel ID
        label:
          type: string
          description: Channel display name
        channel_id:
          type: integer
          description: Telegram channel ID
        channel_type:
          type: string
          enum: [source, destination]
          description: Channel type
        description:
          type: string
          description: Channel description
        status:
          type: string
          enum: [active, inactive, error]
          description: Channel status
        signal_count:
          type: integer
          description: Number of signals processed
        last_signal:
          type: string
          format: date-time
          description: Last signal timestamp
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateTelegramChannelRequest:
      type: object
      required: [label, channel_id]
      properties:
        label:
          type: string
          description: Channel display name
        channel_id:
          type: integer
          description: Telegram channel ID
        channel_type:
          type: string
          default: source
          enum: [source, destination]
          description: Channel type
        description:
          type: string
          description: Channel description

    UpdateTelegramChannelRequest:
      type: object
      properties:
        label:
          type: string
          description: Channel display name
        channel_id:
          type: integer
          description: Telegram channel ID
        channel_type:
          type: string
          enum: [source, destination]
          description: Channel type
        description:
          type: string
          description: Channel description
        status:
          type: string
          enum: [active, inactive, error]
          description: Channel status
        signal_count:
          type: integer
          description: Number of signals processed
        last_signal:
          type: string
          format: date-time
          description: Last signal timestamp

    # ========================================
    # VERSION MANAGEMENT SCHEMAS
    # ========================================
    VersionsResponse:
      type: object
      properties:
        latest:
          type: string
          description: Latest version number
        stable:
          type: string
          description: Stable version number
        all:
          type: array
          items:
            type: string
          description: All available versions
        timestamp:
          type: string
          format: date-time
          description: Response timestamp

    CreateVersionRequest:
      type: object
      properties:
        type:
          type: string
          enum: [major, minor, patch]
          default: minor
          description: Version increment type

    VersionResponse:
      type: object
      properties:
        version:
          type: string
          description: Version number
        path:
          type: string
          description: Version directory path
        specs:
          type: object
          properties:
            openapi:
              type: string
              description: OpenAPI spec path
            asyncapi:
              type: string
              description: AsyncAPI spec path
        timestamp:
          type: string
          format: date-time
          description: Version creation timestamp

    VersionComparisonResponse:
      type: object
      properties:
        v1:
          type: string
          description: First version number
        v2:
          type: string
          description: Second version number
        changes:
          type: object
          properties:
            paths:
              $ref: '#/components/schemas/ChangeSet'
            components:
              $ref: '#/components/schemas/ChangeSet'
        timestamp:
          type: string
          format: date-time
          description: Comparison timestamp

    ChangeSet:
      type: object
      properties:
        added:
          type: array
          items:
            type: string
          description: Added items
        removed:
          type: array
          items:
            type: string
          description: Removed items
        modified:
          type: array
          items:
            type: string
          description: Modified items

    # ========================================
    # SEARCH SCHEMAS
    # ========================================
    SearchResponse:
      type: object
      properties:
        total:
          type: integer
          description: Total number of results
        version:
          type: string
          description: Documentation version searched
        results:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'

    SearchResult:
      type: object
      properties:
        id:
          type: string
          description: Result unique identifier
        type:
          type: string
          enum: [endpoint, channel, message, schema, api-info]
          description: Content type
        title:
          type: string
          description: Result title
        description:
          type: string
          description: Result description
        path:
          type: string
          description: Content path or location
        method:
          type: string
          description: HTTP method for endpoints
        source:
          type: string
          enum: [openapi, asyncapi, schema]
          description: Content source
        version:
          type: string
          description: Documentation version
        score:
          type: number
          description: Search relevance score

    SearchSuggestions:
      type: object
      properties:
        suggestions:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
                description: Suggestion text
              type:
                type: string
                enum: [endpoint, channel, message, schema, api-info]
                description: Content type
              source:
                type: string
                enum: [openapi, asyncapi, schema]
                description: Content source

    ReindexResponse:
      type: object
      properties:
        version:
          type: string
          description: Reindexed version
        indexed:
          type: boolean
          description: Whether reindexing was successful
        timestamp:
          type: string
          format: date-time
          description: Reindex completion timestamp

    # ========================================
    # DOCUMENTATION SCHEMAS
    # ========================================
    DocumentationSystemsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DocumentationSystem'

    DocumentationSystem:
      type: object
      properties:
        id:
          type: string
          description: System ID
        name:
          type: string
          description: System name
        type:
          type: string
          enum: [docusaurus, confluence, gitbook, custom]
          description: System type
        url:
          type: string
          description: System URL
        config:
          type: object
          description: System configuration
        status:
          type: string
          enum: [active, inactive, error]
          description: System status
        lastSync:
          type: string
          format: date-time
          description: Last synchronization timestamp
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateDocumentationSystemRequest:
      type: object
      required: [name, type, url]
      properties:
        name:
          type: string
          description: System name
        type:
          type: string
          enum: [docusaurus, confluence, gitbook, custom]
          description: System type
        url:
          type: string
          description: System URL
        config:
          type: object
          description: System configuration

    IdeasResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Idea'

    Idea:
      type: object
      properties:
        id:
          type: string
          description: Idea ID
        title:
          type: string
          description: Idea title
        description:
          type: string
          description: Idea description
        category:
          type: string
          description: Idea category
        status:
          type: string
          enum: [open, in_progress, completed, archived]
          description: Idea status
        priority:
          type: string
          enum: [low, medium, high, critical]
          description: Idea priority
        author:
          type: string
          description: Idea author
        assignee:
          type: string
          description: Assigned user
        tags:
          type: array
          items:
            type: string
          description: Idea tags
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateIdeaRequest:
      type: object
      required: [title, description, category]
      properties:
        title:
          type: string
          description: Idea title
        description:
          type: string
          description: Idea description
        category:
          type: string
          description: Idea category
        priority:
          type: string
          enum: [low, medium, high, critical]
          default: medium
          description: Idea priority
        tags:
          type: array
          items:
            type: string
          description: Idea tags

    FilesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DocumentationFile'

    DocumentationFile:
      type: object
      properties:
        id:
          type: string
          description: File ID
        name:
          type: string
          description: File name
        path:
          type: string
          description: File path
        type:
          type: string
          enum: [md, mdx, yaml, json, other]
          description: File type
        size:
          type: integer
          description: File size in bytes
        lastModified:
          type: string
          format: date-time
          description: Last modification timestamp
        content:
          type: string
          description: File content (for small files)

    DocumentationStatsResponse:
      type: object
      properties:
        systems:
          type: object
          properties:
            total:
              type: integer
              description: Total number of systems
            active:
              type: integer
              description: Active systems
            inactive:
              type: integer
              description: Inactive systems
        files:
          type: object
          properties:
            total:
              type: integer
              description: Total number of files
            byType:
              type: object
              description: Files by type
              additionalProperties:
                type: integer
        ideas:
          type: object
          properties:
            total:
              type: integer
              description: Total number of ideas
            byStatus:
              type: object
              description: Ideas by status
              additionalProperties:
                type: integer
        lastUpdated:
          type: string
          format: date-time
          description: Last update timestamp

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: Error message
              correlationId:
                type: string
                description: Request correlation ID
          example:
            error: "ingestedAt is required"
            correlationId: "req-123456"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: Error message
              correlationId:
                type: string
                description: Request correlation ID
          example:
            error: "Bot not found"
            correlationId: "req-123456"

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: Error message
              correlationId:
                type: string
                description: Request correlation ID
          example:
            error: "Failed to fetch data"
            correlationId: "req-123456"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

security:
  - BearerAuth: []