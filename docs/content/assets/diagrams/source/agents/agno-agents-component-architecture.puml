@startuml
title Agno Agents - Component Architecture

!define RECTANGLE class

package "Agno Agents Service :8200" {
  package "Interfaces Layer" {
    component "FastAPI Routes" as Routes {
      [POST /api/v1/agents/analyze]
      [POST /api/v1/agents/signals]
      [GET /api/v1/agents/status]
      [GET /health]
      [GET /metrics]
    }

    package "Agents" {
      component "MarketAnalysisAgent" as MarketAgent {
        [analyze_b3_data()]
        [analyze_tp_signals()]
        [calculate_confidence()]
      }

      component "RiskManagementAgent" as RiskAgent {
        [check_daily_loss_limit()]
        [check_position_size()]
        [check_trading_hours()]
      }

      component "SignalOrchestratorAgent" as OrchestratorAgent {
        [orchestrate_analysis()]
        [coordinate_workflow()]
      }
    }
  }

  package "Application Layer" {
    component "Ports" as Ports {
      interface "MarketDataPort" as IMarketData
      interface "WorkspacePort" as IWorkspace
      interface "RiskEnginePort" as IRiskEngine
    }

    component "DTOs" as DTOs {
      [AnalyzeMarketRequest]
      [AnalyzeMarketResponse]
      [OrchestrationRequest]
      [OrchestrationResponse]
    }
  }

  package "Domain Layer" {
    component "Entities" as Entities {
      [MarketSignal]
      [RiskAssessment]
      [AgentDecision]
    }

    component "Value Objects" as ValueObjects {
      [Symbol]
      [Price]
      [Confidence]
    }
  }

  package "Infrastructure Layer" {
    component "HTTP Clients" as Clients {
      component "WorkspaceClient" as WorkspaceClient
      component "TPCapitalClient" as TPCapitalClient
      component "RiskEngineClient" as RiskEngineClient
    }

    component "Resilience" as Resilience {
      [Retry Decorator]
      [Circuit Breaker]
    }

    component "Monitoring" as Monitoring {
      [Prometheus Metrics]
      [Structured Logging]
      [OpenTelemetry Tracing]
    }
  }
}

package "External Services" {
  component "Workspace API\n:3100" as WorkspaceAPI
  component "TP Capital API\n:3200" as TPCapitalAPI
  database "QuestDB" as QuestDB
}

package "Observability Stack" {
  component "Prometheus\n:9090" as Prometheus
  component "Grafana\n:3000" as Grafana
}

Routes --> OrchestratorAgent : uses
Routes --> MarketAgent : uses
Routes --> RiskAgent : uses
Routes ..> DTOs : validates

OrchestratorAgent --> MarketAgent : coordinates
OrchestratorAgent --> RiskAgent : coordinates
MarketAgent ..> IMarketData : implements
MarketAgent ..> IWorkspace : implements
RiskAgent ..> IRiskEngine : implements

MarketAgent ..> Entities : creates
RiskAgent ..> Entities : creates
OrchestratorAgent ..> Entities : aggregates
Entities ..> ValueObjects : uses

IMarketData <|.. TPCapitalClient : implements
IWorkspace <|.. WorkspaceClient : implements
IRiskEngine <|.. RiskEngineClient : implements

WorkspaceClient --> WorkspaceAPI : HTTP
TPCapitalClient --> TPCapitalAPI : HTTP
TPCapitalAPI --> QuestDB : queries

Clients ..> Resilience : uses

Routes --> Monitoring : tracks
MarketAgent --> Monitoring : tracks
RiskAgent --> Monitoring : tracks
OrchestratorAgent --> Monitoring : tracks
Monitoring --> Prometheus : exports
Prometheus --> Grafana : visualizes

note right of MarketAgent
  Consolida sinais TP Capital e contexto
  do Workspace para gerar recomendações.
end note

note right of RiskAgent
  Validates signals against daily limits,
  position sizing and trading hours.
end note

note right of OrchestratorAgent
  Coordinates workflow between agents and
  aggregates final responses.
end note

note bottom of Resilience
  Retry: exponential backoff (500ms, 1500ms, 3000ms)
  Circuit breaker: 5 failures, 60s timeout
end note

@enduml
