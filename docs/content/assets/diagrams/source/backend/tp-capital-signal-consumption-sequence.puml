@startuml
title TP Capital - Signal Consumption Flow

actor Trader
participant "Dashboard UI\n(React :3103)" as Dashboard
participant "React Query\nCache" as ReactQuery
participant "TP Capital API\n(Express :3200)" as API
database "QuestDB\n:9000" as QuestDB
participant "Agno Agents\n:8200" as AgnoAgents

== Initial Page Load ==
Trader -> Dashboard : Navigate to TP Capital page
activate Dashboard

Dashboard -> Dashboard : Initialize React Query
Dashboard -> ReactQuery : useQuery("tp-capital-signals")
activate ReactQuery

ReactQuery -> API : GET /signals?limit=100&channel=all
activate API

API -> API : Build SQL query\n(ORDER BY ts DESC LIMIT 100)
API -> QuestDB : Execute query\nSELECT * FROM tp_capital_signals\nWHERE ts > now() - 7d\nORDER BY ts DESC\nLIMIT 100
activate QuestDB

QuestDB -> QuestDB : Read from partitioned table
QuestDB --> API : Return signal rows\n[{id, asset, signal_type, buy_min, buy_max, targets, stop, channel, ts}, ...]
deactivate QuestDB

API -> API : Format response\n{data: SignalRow[]}
API --> ReactQuery : 200 OK {data: [...]}
deactivate API

ReactQuery -> ReactQuery : Store results in cache\n(staleTime: 10s)
ReactQuery --> Dashboard : Return signal data
deactivate ReactQuery

Dashboard -> Dashboard : Render table with signals\n(sort by timestamp desc)
Dashboard --> Trader : Display signals
deactivate Dashboard

== Parallel Consumption: Agno Agents ==
par Dashboard consumes signals
  Dashboard -> API : Periodic polling (every 15s)
else Agno Agents consume signals
  AgnoAgents -> API : GET /signals?limit=50&channel=all
  activate AgnoAgents
  activate API
  
  API -> QuestDB : Execute query\nSELECT * FROM tp_capital_signals\nWHERE ts > now() - 1d\nORDER BY ts DESC\nLIMIT 50
  activate QuestDB
  QuestDB --> API : Return recent signals
  deactivate QuestDB
  
  API --> AgnoAgents : 200 OK {data: [...]}
  deactivate API
  
  AgnoAgents -> AgnoAgents : Fetch B3 market data (parallel)
  AgnoAgents -> AgnoAgents : Fetch Workspace ideas (parallel)
  AgnoAgents -> AgnoAgents : Correlate datasets:\n- TP Capital signal strength\n- B3 price trends\n- Workspace idea alignment
  AgnoAgents -> AgnoAgents : Generate trading recommendations
  deactivate AgnoAgents
end

== Auto-Refresh (Dashboard) ==
... 15 seconds later ...

Dashboard -> ReactQuery : Auto-refetch triggered\n(refetchInterval: 15000)
activate Dashboard
activate ReactQuery

ReactQuery -> API : GET /signals?limit=100&channel=all
activate API
API -> QuestDB : Execute query
activate QuestDB
QuestDB --> API : Return updated signals\n(new signals since last fetch)
deactivate QuestDB
API --> ReactQuery : 200 OK {data: [...]}
deactivate API

ReactQuery -> ReactQuery : Compare with cached data
alt New signals available
  ReactQuery -> ReactQuery : Update cache
  ReactQuery --> Dashboard : Notify data changed
  Dashboard -> Dashboard : Re-render table\n(show new signals with highlight)
  Dashboard --> Trader : Display updated signals
else No new signals
  ReactQuery --> Dashboard : Return cached data
  Dashboard -> Dashboard : No re-render needed
end

deactivate ReactQuery
deactivate Dashboard

== Filter Update ==
Trader -> Dashboard : Change filter\n(channel: "TP_Capital", signal_type: "COMPRA")
activate Dashboard

Dashboard -> Dashboard : Update query parameters
Dashboard -> ReactQuery : useQuery with new key\n("tp-capital-signals", {channel: "TP_Capital", type: "COMPRA"})
activate ReactQuery

ReactQuery -> API : GET /signals?channel=TP_Capital&type=COMPRA&limit=100
activate API

API -> API : Build filtered SQL query\nWHERE channel = 'TP_Capital'\nAND signal_type = 'COMPRA'
API -> QuestDB : Execute filtered query
activate QuestDB
QuestDB --> API : Return filtered signals
deactivate QuestDB

API --> ReactQuery : 200 OK {data: [...]}
deactivate API

ReactQuery -> ReactQuery : Store in separate cache entry
ReactQuery --> Dashboard : Return filtered data
deactivate ReactQuery

Dashboard -> Dashboard : Render filtered table
Dashboard --> Trader : Display filtered signals
deactivate Dashboard

== Error Handling ==
alt API failure
  Dashboard -> API : GET /signals
  API --> Dashboard : 500 Internal Server Error
  
  Dashboard -> ReactQuery : Handle error
  activate ReactQuery
  ReactQuery -> ReactQuery : Retry with exponential backoff\n- Attempt 1: Immediate\n- Attempt 2: 1s delay\n- Attempt 3: 5s delay
  
  alt Retry succeeds
    ReactQuery -> API : GET /signals (retry)
    API --> ReactQuery : 200 OK
    ReactQuery --> Dashboard : Return data
  else All retries fail
    ReactQuery --> Dashboard : Error state
    Dashboard -> Dashboard : Display error message\n"Unable to load signals. Retrying..."
    Dashboard -> Dashboard : Keep previous data visible\n(stale data better than no data)
    Dashboard --> Trader : Show error notification
  end
  deactivate ReactQuery
end

note over Dashboard, QuestDB
  **Performance Targets**
  - Query latency: <100ms p95 (100 rows)
  - Auto-refresh interval: 15 seconds
  - React Query staleTime: 10 seconds
  - Cache timeout: 5 minutes
end note

note over ReactQuery
  **React Query Configuration**
  - staleTime: 10000 (10s)
  - refetchInterval: 15000 (15s)
  - cacheTime: 300000 (5min)
  - retry: 3 attempts with backoff
  - refetchOnWindowFocus: true
  - keepPreviousData: true
end note

note over QuestDB
  **Query Optimization**
  - Table partitioned by day
  - Indexes on: ts, channel, signal_type
  - LIMIT clause to reduce data transfer
  - WHERE clause filters at DB level
  - Typical query: <50ms execution time
end note

note over AgnoAgents
  **Agent Integration**
  - Polls every 30 seconds
  - Combines TP Capital signals with:
    * B3 real-time market data
    * Workspace idea backlog
  - Uses LLM/heuristics to correlate
  - Generates actionable recommendations
end note

note as N1
  **Future: WebSocket for Real-Time Updates**
  Current: Polling every 15 seconds
  Planned: WebSocket push notifications
  - Eliminates polling overhead
  - Instant signal delivery (<100ms)
  - Reduces server load
  - Better user experience
end note

@enduml
