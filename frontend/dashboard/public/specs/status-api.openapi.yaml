openapi: 3.1.0
info:
  title: TradingSystem Status API (Service Launcher)
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  description: |
    Central orchestration and health monitoring API for the TradingSystem platform.

    The Status API (also known as Service Launcher API) provides comprehensive health checking,
    service launching capabilities, and status aggregation across all backend services, databases,
    and infrastructure components.

    **Key Features:**
    - Service health monitoring with circuit breaker pattern
    - Auto-start capability for down services
    - Service launching in terminal emulators
    - Health check caching (60s TTL)
    - Prometheus metrics export
    - Comprehensive logging

    **Monitored Services:**
    - 11+ backend services (APIs, messaging, UI)
    - Database containers (QuestDB, TimescaleDB, PostgreSQL)
    - Monitoring stack (Prometheus, Grafana)

    **Rate Limiting:**
    - Global rate limit: 200 requests per minute per IP
    - Auto-start cooldown: 30 seconds between attempts

    **Authentication:**
    - Currently no authentication (internal service)
    - Production deployments should add API key authentication
servers:
  - url: http://localhost:3500
    description: Local development
security: []
tags:
  - name: Health
    description: Health checks and service status
  - name: Orchestration
    description: Service launching and auto-start
  - name: Circuit Breaker
    description: Circuit breaker status and management
  - name: Metrics
    description: Prometheus metrics and start metrics

paths:
  /health:
    get:
      tags: [Health]
      summary: Simple health check
      description: Returns OK status. Use for liveness probes.
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  service:
                    type: string
                    example: "service-launcher-api"

  /api/status:
    get:
      tags: [Health]
      summary: Aggregate service status
      description: |
        Probes all monitored services and returns aggregated health status.

        **Features:**
        - Parallel health checks with Promise.all
        - Circuit breaker protection
        - Latency measurement for each service
        - Results sorted by severity (down → degraded → ok)
      responses:
        '200':
          description: Service status aggregation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStatusResponse'
              example:
                overallStatus: "ok"
                totalServices: 11
                degradedCount: 0
                downCount: 0
                averageLatencyMs: 45
                lastCheckAt: "2025-10-27T12:00:00.000Z"
                services:
                  - id: "workspace-api"
                    name: "Workspace"
                    description: "Workspace item management"
                    category: "api"
                    port: 3200
                    status: "ok"
                    latencyMs: 32
                    updatedAt: "2025-10-27T12:00:00.000Z"
                    details:
                      healthUrl: "http://localhost:3200/health"
                      httpStatus: 200
                      timeoutMs: 2500

  /api/health/full:
    get:
      tags: [Health]
      summary: Comprehensive health check (cached)
      description: |
        Executes comprehensive health check script `scripts/maintenance/health-check-all.sh`.

        **Caching:**
        - 60-second TTL cache
        - In-flight deduplication (multiple requests share single execution)
        - Cache status via X-Cache-Status header (HIT | MISS)
        - Cache age via X-Cache-Age header (seconds)

        **Script Execution:**
        - Timeout: 10 seconds max
        - Exit codes: 0=healthy, 1=degraded, 2=critical
      responses:
        '200':
          description: Comprehensive health status
          headers:
            X-Cache-Status:
              schema:
                type: string
                enum: [HIT, MISS]
              description: Cache hit or miss
            X-Cache-Age:
              schema:
                type: integer
              description: Cache age in seconds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullHealthResponse'
        '500':
          description: Health check script failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /circuit-breaker:
    get:
      tags: [Circuit Breaker]
      summary: Circuit breaker status
      description: |
        Returns circuit breaker state for all monitored services.

        **Configuration:**
        - Threshold: 5 consecutive failures
        - Timeout: 60 seconds (open state duration)

        **States:**
        - `closed`: Service healthy, requests allowed
        - `open`: Service unhealthy, requests blocked
        - `half-open`: Testing if service recovered (not implemented yet)
      responses:
        '200':
          description: Circuit breaker status for all services
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CircuitBreakerResponse'
              example:
                threshold: 5
                timeoutMs: 60000
                activeCircuits: 2
                circuits:
                  - serviceId: "workspace-api"
                    state: "closed"
                    failureCount: 0
                    lastFailureTime: null
                  - serviceId: "tp-capital-signals-api"
                    state: "open"
                    failureCount: 5
                    lastFailureTime: "2025-10-27T11:55:00.000Z"

  /launch:
    post:
      tags: [Orchestration]
      summary: Launch service in terminal
      description: |
        Launch a service in a detected terminal emulator.

        **Supported Terminals:**
        - Linux: gnome-terminal, konsole, xterm
        - macOS: Terminal.app, iTerm2
        - Windows: Windows Terminal, cmd, PowerShell
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LaunchRequest'
            example:
              serviceName: "Workspace API"
              workingDir: "/home/marce/Projetos/TradingSystem/backend/api/workspace"
              command: "npm run dev"
      responses:
        '200':
          description: Service launched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LaunchResponse'
              example:
                success: true
                message: "Workspace API launched in gnome-terminal"
                terminal: "gnome-terminal"
                platform: "linux"
        '400':
          description: Missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: No supported terminal found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auto-start/{serviceId}:
    post:
      tags: [Orchestration]
      summary: Auto-start service
      description: |
        Auto-start a service with built-in cooldown (30 seconds between attempts).

        **Supported Service IDs:**
        - `workspace-api`
        - `documentation-api`
        - `firecrawl-proxy`
        - `telegram-gateway`
        - `telegram-gateway-api`
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
            enum: [workspace-api, documentation-api, firecrawl-proxy, telegram-gateway, telegram-gateway-api]
          description: Service identifier
      responses:
        '200':
          description: Service auto-started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  serviceId:
                    type: string
                  terminal:
                    type: string
              example:
                success: true
                message: "Workspace API auto-started"
                serviceId: "workspace-api"
                terminal: "gnome-terminal"
        '404':
          description: Service configuration not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Auto-start cooldown active
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Auto-start cooldown active. Try again in 25s"

  /api/start-metrics:
    get:
      tags: [Metrics]
      summary: Start metrics
      description: |
        Returns metrics from the last system start, including service launch times,
        success rates, and terminal detection.
      responses:
        '200':
          description: Start metrics data
          content:
            application/json:
              schema:
                type: object
                properties:
                  lastStartTime:
                    type: string
                    format: date-time
                  servicesStarted:
                    type: integer
                  successfulStarts:
                    type: integer
                  failedStarts:
                    type: integer
                  terminalUsed:
                    type: string
              example:
                lastStartTime: "2025-10-27T10:00:00.000Z"
                servicesStarted: 5
                successfulStarts: 5
                failedStarts: 0
                terminalUsed: "gnome-terminal"

  /metrics:
    get:
      tags: [Metrics]
      summary: Prometheus metrics
      description: |
        Returns process and application metrics in Prometheus text format.

        **Custom Metrics:**
        - `status_health_check_duration_seconds` - Health check execution duration
        - `status_health_check_full_duration_seconds` - Full health check duration
        - `status_service_launch_total` - Service launch attempts
        - `status_overall_status` - Overall system status
        - `status_circuit_breaker_state` - Circuit breaker state
        - `status_circuit_breaker_failures_total` - Circuit breaker failures

        **Node.js Metrics:**
        - `process_cpu_user_seconds_total` - CPU usage
        - `process_resident_memory_bytes` - Memory usage
        - `nodejs_eventloop_lag_seconds` - Event loop lag
      responses:
        '200':
          description: Metrics data
          content:
            text/plain:
              schema:
                type: string
              example: |
                # HELP status_health_check_duration_seconds Health check execution duration
                # TYPE status_health_check_duration_seconds histogram
                status_health_check_duration_seconds{service="workspace-api",status="ok"} 0.032

components:
  schemas:
    ServiceStatusResponse:
      type: object
      required:
        - overallStatus
        - totalServices
        - degradedCount
        - downCount
        - services
      properties:
        overallStatus:
          type: string
          enum: [ok, degraded, down]
          description: Overall system health
        totalServices:
          type: integer
          description: Total number of monitored services
        degradedCount:
          type: integer
          description: Number of degraded services
        downCount:
          type: integer
          description: Number of down services
        averageLatencyMs:
          type: number
          description: Average response time across all services
        lastCheckAt:
          type: string
          format: date-time
          description: Timestamp of last health check
        services:
          type: array
          items:
            $ref: '#/components/schemas/ServiceStatus'

    ServiceStatus:
      type: object
      required:
        - id
        - name
        - status
      properties:
        id:
          type: string
          description: Service identifier
        name:
          type: string
          description: Human-readable service name
        description:
          type: string
          description: Service description
        category:
          type: string
          enum: [api, messaging, ui, docs, monitoring, data, internal]
          description: Service category
        port:
          type: integer
          description: Service port
        status:
          type: string
          enum: [ok, degraded, down]
          description: Service health status
        latencyMs:
          anyOf:
            - type: number
            - type: "null"
          description: Health check response time in milliseconds
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        details:
          type: object
          properties:
            healthUrl:
              type: string
              description: Health check URL
            httpStatus:
              type: integer
              description: HTTP status code
            timeoutMs:
              type: integer
              description: Health check timeout

    FullHealthResponse:
      type: object
      properties:
        overallHealth:
          type: string
          enum: [healthy, degraded, critical]
        categories:
          type: object
          additionalProperties:
            type: object
            properties:
              status:
                type: string
              services:
                type: array
                items:
                  type: object
        timestamp:
          type: string
          format: date-time

    CircuitBreakerResponse:
      type: object
      required:
        - threshold
        - timeoutMs
        - activeCircuits
        - circuits
      properties:
        threshold:
          type: integer
          description: Failure threshold before circuit opens
        timeoutMs:
          type: integer
          description: How long circuit stays open (milliseconds)
        activeCircuits:
          type: integer
          description: Number of open circuits
        circuits:
          type: array
          items:
            type: object
            properties:
              serviceId:
                type: string
              state:
                type: string
                enum: [closed, open, half-open]
              failureCount:
                type: integer
              lastFailureTime:
                anyOf:
                  - type: string
                    format: date-time
                  - type: "null"

    LaunchRequest:
      type: object
      required:
        - serviceName
        - workingDir
        - command
      properties:
        serviceName:
          type: string
          description: Human-readable service name
        workingDir:
          type: string
          description: Working directory for the service
        command:
          type: string
          description: Command to execute (e.g., "npm run dev")

    LaunchResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        terminal:
          type: string
          description: Terminal emulator used
        platform:
          type: string
          description: Operating system platform

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
        message:
          type: string
